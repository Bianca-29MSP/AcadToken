syntax = "proto3";

package academictoken.curriculum;

import "amino/amino.proto";
import "gogoproto/gogo.proto";
import "google/api/annotations.proto";
import "cosmos/base/query/v1beta1/pagination.proto";
import "academictoken/curriculum/params.proto";
import "academictoken/curriculum/institution.proto";
import "academictoken/curriculum/course_token.proto";
import "academictoken/curriculum/course_equivalence.proto";
import "academictoken/curriculum/academic_tree.proto";

option go_package = "github.com/Bianca-29MSP/AcademicToken/x/curriculum/types";

// Query defines the gRPC querier service.
service Query {
  
  // Parameters queries the parameters of the module.
  rpc Params (QueryParamsRequest) returns (QueryParamsResponse) {
    option (google.api.http).get = "/Bianca-29MSP/AcademicToken/curriculum/params";
  
  }
  
  // Queries a list of GetAcademicTree items.
  rpc GetAcademicTree (QueryGetAcademicTreeRequest) returns (QueryGetAcademicTreeResponse) {
    option (google.api.http).get = "/Bianca-29MSP/AcademicToken/curriculum/get_academic_tree/{student}";
  
  }
  
  // Queries a list of AvailableCourses items.
  rpc AvailableCourses (QueryAvailableCoursesRequest) returns (QueryAvailableCoursesResponse) {
    option (google.api.http).get = "/Bianca-29MSP/AcademicToken/curriculum/available_courses/{student}";
  
  }
  
  // Queries a list of CheckEquivalence items.
  rpc CheckEquivalence (QueryCheckEquivalenceRequest) returns (QueryCheckEquivalenceResponse) {
    option (google.api.http).get = "/Bianca-29MSP/AcademicToken/curriculum/check_equivalence/{tokenId}/{institution}";
  
  }
  
  // Queries a list of CriticalCourses items.
  rpc CriticalCourses (QueryCriticalCoursesRequest) returns (QueryCriticalCoursesResponse) {
    option (google.api.http).get = "/Bianca-29MSP/AcademicToken/curriculum/critical_courses/{institution}/{threshold}";
  
  }
  
  // Queries a list of Institution items.
  rpc Institution    (QueryGetInstitutionRequest) returns (QueryGetInstitutionResponse) {
    option (google.api.http).get = "/Bianca-29MSP/AcademicToken/curriculum/institution/{index}";
  
  }
  rpc InstitutionAll (QueryAllInstitutionRequest) returns (QueryAllInstitutionResponse) {
    option (google.api.http).get = "/Bianca-29MSP/AcademicToken/curriculum/institution";
  
  }
  
  // Queries a list of CourseToken items.
  rpc CourseToken    (QueryGetCourseTokenRequest) returns (QueryGetCourseTokenResponse) {
    option (google.api.http).get = "/Bianca-29MSP/AcademicToken/curriculum/course_token/{index}";
  
  }
  rpc CourseTokenAll (QueryAllCourseTokenRequest) returns (QueryAllCourseTokenResponse) {
    option (google.api.http).get = "/Bianca-29MSP/AcademicToken/curriculum/course_token";
  
  }
  
  // Queries a list of CourseEquivalence items.
  rpc CourseEquivalence    (QueryGetCourseEquivalenceRequest) returns (QueryGetCourseEquivalenceResponse) {
    option (google.api.http).get = "/Bianca-29MSP/AcademicToken/curriculum/course_equivalence/{index}";
  
  }
  rpc CourseEquivalenceAll (QueryAllCourseEquivalenceRequest) returns (QueryAllCourseEquivalenceResponse) {
    option (google.api.http).get = "/Bianca-29MSP/AcademicToken/curriculum/course_equivalence";
  
  }
}
// QueryParamsRequest is request type for the Query/Params RPC method.
message QueryParamsRequest {}

// QueryParamsResponse is response type for the Query/Params RPC method.
message QueryParamsResponse {
  
  // params holds all the parameters of this module.
  Params params = 1 [(gogoproto.nullable) = false, (amino.dont_omitempty) = true];
}

message QueryGetAcademicTreeRequest {
  string student = 1;
}

message QueryGetAcademicTreeResponse {
  AcademicTree academicTree = 1;
}

message QueryAvailableCoursesRequest {
  string student = 1;
}

message QueryAvailableCoursesResponse {
  repeated CourseToken availableCourses = 1;
}

message QueryCheckEquivalenceRequest {
  string tokenId     = 1;
  string institution = 2;
}

message QueryCheckEquivalenceResponse {
  repeated CourseEquivalence equivalences = 1;
}

message QueryCriticalCoursesRequest {
  string institution = 1;
  uint64 threshold   = 2;
}

message QueryCriticalCoursesResponse {
  repeated CourseToken criticalCourses = 1;
}

message QueryGetInstitutionRequest {
  string index = 1;
}

message QueryGetInstitutionResponse {
  Institution institution = 1 [(gogoproto.nullable) = false];
}

message QueryAllInstitutionRequest {
  cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

message QueryAllInstitutionResponse {
  repeated Institution                            institution = 1 [(gogoproto.nullable) = false];
           cosmos.base.query.v1beta1.PageResponse pagination  = 2;
}

message QueryGetCourseTokenRequest {
  string index = 1;
}

message QueryGetCourseTokenResponse {
  CourseToken courseToken = 1 [(gogoproto.nullable) = false];
}

message QueryAllCourseTokenRequest {
  cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

message QueryAllCourseTokenResponse {
  repeated CourseToken                            courseToken = 1 [(gogoproto.nullable) = false];
           cosmos.base.query.v1beta1.PageResponse pagination  = 2;
}

message QueryGetCourseEquivalenceRequest {
  string index = 1;
}

message QueryGetCourseEquivalenceResponse {
  CourseEquivalence courseEquivalence = 1 [(gogoproto.nullable) = false];
}

message QueryAllCourseEquivalenceRequest {
  cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

message QueryAllCourseEquivalenceResponse {
  repeated CourseEquivalence                      courseEquivalence = 1 [(gogoproto.nullable) = false];
           cosmos.base.query.v1beta1.PageResponse pagination        = 2;
}

