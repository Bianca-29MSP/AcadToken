syntax = "proto3";

package academictoken.curriculum;

import "amino/amino.proto";
import "cosmos/msg/v1/msg.proto";
import "cosmos_proto/cosmos.proto";
import "gogoproto/gogo.proto";
import "academictoken/curriculum/params.proto";

option go_package = "github.com/Bianca-29MSP/AcademicToken/x/curriculum/types";

// Msg defines the Msg service.
service Msg {
  option (cosmos.msg.v1.service) = true;
  
  // UpdateParams defines a (governance) operation for updating the module
  // parameters. The authority defaults to the x/gov module account.
  rpc UpdateParams        (MsgUpdateParams       ) returns (MsgUpdateParamsResponse       );
  rpc RegisterInstitution (MsgRegisterInstitution) returns (MsgRegisterInstitutionResponse);
  rpc IssueCourseToken    (MsgIssueCourseToken   ) returns (MsgIssueCourseTokenResponse   );
  rpc VerifyPrerequisites (MsgVerifyPrerequisites) returns (MsgVerifyPrerequisitesResponse);
  rpc ProposeEquivalence  (MsgProposeEquivalence ) returns (MsgProposeEquivalenceResponse );
  rpc CreateCourseContent (MsgCreateCourseContent) returns (MsgCreateCourseContentResponse);
}
// MsgUpdateParams is the Msg/UpdateParams request type.
message MsgUpdateParams {
  option (cosmos.msg.v1.signer) =                                  "authority";
  option           (amino.name) = "academictoken/x/curriculum/MsgUpdateParams";
  
  // authority is the address that controls the module (defaults to x/gov unless overwritten).
  string authority = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];

  // params defines the module parameters to update.
  
  // NOTE: All parameters must be supplied.
  Params params = 2 [(gogoproto.nullable) = false, (amino.dont_omitempty) = true];
}

// MsgUpdateParamsResponse defines the response structure for executing a
// MsgUpdateParams message.
message MsgUpdateParamsResponse {}

message MsgRegisterInstitution {
  option (cosmos.msg.v1.signer) = "creator";
  string creator = 1;
  string address = 2;
  string name    = 3;
}

message MsgRegisterInstitutionResponse {}

message MsgIssueCourseToken {
  option (cosmos.msg.v1.signer) = "creator";
           string creator        =  1;
           string tokenId        =  2;
           string name           =  3;
           string code           =  4;
           string contentHash    =  5;
           string institution    =  6;
           string completionDate =  7;
           uint64 grade          =  8;
  repeated string prerequisites  =  9;
           string recipient      = 10;
}

message MsgIssueCourseTokenResponse {}

message MsgVerifyPrerequisites {
  option (cosmos.msg.v1.signer) = "creator";
  string creator    = 1;
  string student    = 2;
  string courseCode = 3;
}

message MsgVerifyPrerequisitesResponse {}

message MsgProposeEquivalence {
  option (cosmos.msg.v1.signer) = "creator";
  string creator           = 1;
  string sourceTokenId     = 2;
  string targetInstitution = 3;
  string targetCourseCode  = 4;
}

message MsgProposeEquivalenceResponse {}

message MsgCreateCourseContent {
  option (cosmos.msg.v1.signer) = "creator";
           string creator                   =  1;
           string courseId                  =  2;
           string institution               =  3;
           string title                     =  4;
           string code                      =  5;
           uint64 workloadHours             =  6;
           uint64 credits                   =  7;
           string description               =  8;
  repeated string objectives                =  9;
  repeated string topicUnits                = 10;
  repeated string methodologies             = 11;
  repeated string evaluationMethods         = 12;
  repeated string bibliographyBasic         = 13;
  repeated string bibliographyComplementary = 14;
  repeated string keywords                  = 15;
           string contentHash               = 16;
}

message MsgCreateCourseContentResponse {}

