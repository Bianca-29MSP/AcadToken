// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: academictoken/curriculum/query.proto

package curriculum

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Query_Params_FullMethodName               = "/academictoken.curriculum.Query/Params"
	Query_GetAcademicTree_FullMethodName      = "/academictoken.curriculum.Query/GetAcademicTree"
	Query_AvailableCourses_FullMethodName     = "/academictoken.curriculum.Query/AvailableCourses"
	Query_CheckEquivalence_FullMethodName     = "/academictoken.curriculum.Query/CheckEquivalence"
	Query_CriticalCourses_FullMethodName      = "/academictoken.curriculum.Query/CriticalCourses"
	Query_Institution_FullMethodName          = "/academictoken.curriculum.Query/Institution"
	Query_InstitutionAll_FullMethodName       = "/academictoken.curriculum.Query/InstitutionAll"
	Query_CourseToken_FullMethodName          = "/academictoken.curriculum.Query/CourseToken"
	Query_CourseTokenAll_FullMethodName       = "/academictoken.curriculum.Query/CourseTokenAll"
	Query_CourseEquivalence_FullMethodName    = "/academictoken.curriculum.Query/CourseEquivalence"
	Query_CourseEquivalenceAll_FullMethodName = "/academictoken.curriculum.Query/CourseEquivalenceAll"
	Query_CourseContent_FullMethodName        = "/academictoken.curriculum.Query/CourseContent"
	Query_CourseContentAll_FullMethodName     = "/academictoken.curriculum.Query/CourseContentAll"
)

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type QueryClient interface {
	// Parameters queries the parameters of the module.
	Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error)
	// Queries a list of GetAcademicTree items.
	GetAcademicTree(ctx context.Context, in *QueryGetAcademicTreeRequest, opts ...grpc.CallOption) (*QueryGetAcademicTreeResponse, error)
	// Queries a list of AvailableCourses items.
	AvailableCourses(ctx context.Context, in *QueryAvailableCoursesRequest, opts ...grpc.CallOption) (*QueryAvailableCoursesResponse, error)
	// Queries a list of CheckEquivalence items.
	CheckEquivalence(ctx context.Context, in *QueryCheckEquivalenceRequest, opts ...grpc.CallOption) (*QueryCheckEquivalenceResponse, error)
	// Queries a list of CriticalCourses items.
	CriticalCourses(ctx context.Context, in *QueryCriticalCoursesRequest, opts ...grpc.CallOption) (*QueryCriticalCoursesResponse, error)
	// Queries a list of Institution items.
	Institution(ctx context.Context, in *QueryGetInstitutionRequest, opts ...grpc.CallOption) (*QueryGetInstitutionResponse, error)
	InstitutionAll(ctx context.Context, in *QueryAllInstitutionRequest, opts ...grpc.CallOption) (*QueryAllInstitutionResponse, error)
	// Queries a list of CourseToken items.
	CourseToken(ctx context.Context, in *QueryGetCourseTokenRequest, opts ...grpc.CallOption) (*QueryGetCourseTokenResponse, error)
	CourseTokenAll(ctx context.Context, in *QueryAllCourseTokenRequest, opts ...grpc.CallOption) (*QueryAllCourseTokenResponse, error)
	// Queries a list of CourseEquivalence items.
	CourseEquivalence(ctx context.Context, in *QueryGetCourseEquivalenceRequest, opts ...grpc.CallOption) (*QueryGetCourseEquivalenceResponse, error)
	CourseEquivalenceAll(ctx context.Context, in *QueryAllCourseEquivalenceRequest, opts ...grpc.CallOption) (*QueryAllCourseEquivalenceResponse, error)
	// Queries a list of CourseContent items.
	CourseContent(ctx context.Context, in *QueryGetCourseContentRequest, opts ...grpc.CallOption) (*QueryGetCourseContentResponse, error)
	CourseContentAll(ctx context.Context, in *QueryAllCourseContentRequest, opts ...grpc.CallOption) (*QueryAllCourseContentResponse, error)
}

type queryClient struct {
	cc grpc.ClientConnInterface
}

func NewQueryClient(cc grpc.ClientConnInterface) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error) {
	out := new(QueryParamsResponse)
	err := c.cc.Invoke(ctx, Query_Params_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetAcademicTree(ctx context.Context, in *QueryGetAcademicTreeRequest, opts ...grpc.CallOption) (*QueryGetAcademicTreeResponse, error) {
	out := new(QueryGetAcademicTreeResponse)
	err := c.cc.Invoke(ctx, Query_GetAcademicTree_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) AvailableCourses(ctx context.Context, in *QueryAvailableCoursesRequest, opts ...grpc.CallOption) (*QueryAvailableCoursesResponse, error) {
	out := new(QueryAvailableCoursesResponse)
	err := c.cc.Invoke(ctx, Query_AvailableCourses_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) CheckEquivalence(ctx context.Context, in *QueryCheckEquivalenceRequest, opts ...grpc.CallOption) (*QueryCheckEquivalenceResponse, error) {
	out := new(QueryCheckEquivalenceResponse)
	err := c.cc.Invoke(ctx, Query_CheckEquivalence_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) CriticalCourses(ctx context.Context, in *QueryCriticalCoursesRequest, opts ...grpc.CallOption) (*QueryCriticalCoursesResponse, error) {
	out := new(QueryCriticalCoursesResponse)
	err := c.cc.Invoke(ctx, Query_CriticalCourses_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Institution(ctx context.Context, in *QueryGetInstitutionRequest, opts ...grpc.CallOption) (*QueryGetInstitutionResponse, error) {
	out := new(QueryGetInstitutionResponse)
	err := c.cc.Invoke(ctx, Query_Institution_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) InstitutionAll(ctx context.Context, in *QueryAllInstitutionRequest, opts ...grpc.CallOption) (*QueryAllInstitutionResponse, error) {
	out := new(QueryAllInstitutionResponse)
	err := c.cc.Invoke(ctx, Query_InstitutionAll_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) CourseToken(ctx context.Context, in *QueryGetCourseTokenRequest, opts ...grpc.CallOption) (*QueryGetCourseTokenResponse, error) {
	out := new(QueryGetCourseTokenResponse)
	err := c.cc.Invoke(ctx, Query_CourseToken_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) CourseTokenAll(ctx context.Context, in *QueryAllCourseTokenRequest, opts ...grpc.CallOption) (*QueryAllCourseTokenResponse, error) {
	out := new(QueryAllCourseTokenResponse)
	err := c.cc.Invoke(ctx, Query_CourseTokenAll_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) CourseEquivalence(ctx context.Context, in *QueryGetCourseEquivalenceRequest, opts ...grpc.CallOption) (*QueryGetCourseEquivalenceResponse, error) {
	out := new(QueryGetCourseEquivalenceResponse)
	err := c.cc.Invoke(ctx, Query_CourseEquivalence_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) CourseEquivalenceAll(ctx context.Context, in *QueryAllCourseEquivalenceRequest, opts ...grpc.CallOption) (*QueryAllCourseEquivalenceResponse, error) {
	out := new(QueryAllCourseEquivalenceResponse)
	err := c.cc.Invoke(ctx, Query_CourseEquivalenceAll_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) CourseContent(ctx context.Context, in *QueryGetCourseContentRequest, opts ...grpc.CallOption) (*QueryGetCourseContentResponse, error) {
	out := new(QueryGetCourseContentResponse)
	err := c.cc.Invoke(ctx, Query_CourseContent_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) CourseContentAll(ctx context.Context, in *QueryAllCourseContentRequest, opts ...grpc.CallOption) (*QueryAllCourseContentResponse, error) {
	out := new(QueryAllCourseContentResponse)
	err := c.cc.Invoke(ctx, Query_CourseContentAll_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
// All implementations must embed UnimplementedQueryServer
// for forward compatibility
type QueryServer interface {
	// Parameters queries the parameters of the module.
	Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error)
	// Queries a list of GetAcademicTree items.
	GetAcademicTree(context.Context, *QueryGetAcademicTreeRequest) (*QueryGetAcademicTreeResponse, error)
	// Queries a list of AvailableCourses items.
	AvailableCourses(context.Context, *QueryAvailableCoursesRequest) (*QueryAvailableCoursesResponse, error)
	// Queries a list of CheckEquivalence items.
	CheckEquivalence(context.Context, *QueryCheckEquivalenceRequest) (*QueryCheckEquivalenceResponse, error)
	// Queries a list of CriticalCourses items.
	CriticalCourses(context.Context, *QueryCriticalCoursesRequest) (*QueryCriticalCoursesResponse, error)
	// Queries a list of Institution items.
	Institution(context.Context, *QueryGetInstitutionRequest) (*QueryGetInstitutionResponse, error)
	InstitutionAll(context.Context, *QueryAllInstitutionRequest) (*QueryAllInstitutionResponse, error)
	// Queries a list of CourseToken items.
	CourseToken(context.Context, *QueryGetCourseTokenRequest) (*QueryGetCourseTokenResponse, error)
	CourseTokenAll(context.Context, *QueryAllCourseTokenRequest) (*QueryAllCourseTokenResponse, error)
	// Queries a list of CourseEquivalence items.
	CourseEquivalence(context.Context, *QueryGetCourseEquivalenceRequest) (*QueryGetCourseEquivalenceResponse, error)
	CourseEquivalenceAll(context.Context, *QueryAllCourseEquivalenceRequest) (*QueryAllCourseEquivalenceResponse, error)
	// Queries a list of CourseContent items.
	CourseContent(context.Context, *QueryGetCourseContentRequest) (*QueryGetCourseContentResponse, error)
	CourseContentAll(context.Context, *QueryAllCourseContentRequest) (*QueryAllCourseContentResponse, error)
	mustEmbedUnimplementedQueryServer()
}

// UnimplementedQueryServer must be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (UnimplementedQueryServer) Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Params not implemented")
}
func (UnimplementedQueryServer) GetAcademicTree(context.Context, *QueryGetAcademicTreeRequest) (*QueryGetAcademicTreeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAcademicTree not implemented")
}
func (UnimplementedQueryServer) AvailableCourses(context.Context, *QueryAvailableCoursesRequest) (*QueryAvailableCoursesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AvailableCourses not implemented")
}
func (UnimplementedQueryServer) CheckEquivalence(context.Context, *QueryCheckEquivalenceRequest) (*QueryCheckEquivalenceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckEquivalence not implemented")
}
func (UnimplementedQueryServer) CriticalCourses(context.Context, *QueryCriticalCoursesRequest) (*QueryCriticalCoursesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CriticalCourses not implemented")
}
func (UnimplementedQueryServer) Institution(context.Context, *QueryGetInstitutionRequest) (*QueryGetInstitutionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Institution not implemented")
}
func (UnimplementedQueryServer) InstitutionAll(context.Context, *QueryAllInstitutionRequest) (*QueryAllInstitutionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InstitutionAll not implemented")
}
func (UnimplementedQueryServer) CourseToken(context.Context, *QueryGetCourseTokenRequest) (*QueryGetCourseTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CourseToken not implemented")
}
func (UnimplementedQueryServer) CourseTokenAll(context.Context, *QueryAllCourseTokenRequest) (*QueryAllCourseTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CourseTokenAll not implemented")
}
func (UnimplementedQueryServer) CourseEquivalence(context.Context, *QueryGetCourseEquivalenceRequest) (*QueryGetCourseEquivalenceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CourseEquivalence not implemented")
}
func (UnimplementedQueryServer) CourseEquivalenceAll(context.Context, *QueryAllCourseEquivalenceRequest) (*QueryAllCourseEquivalenceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CourseEquivalenceAll not implemented")
}
func (UnimplementedQueryServer) CourseContent(context.Context, *QueryGetCourseContentRequest) (*QueryGetCourseContentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CourseContent not implemented")
}
func (UnimplementedQueryServer) CourseContentAll(context.Context, *QueryAllCourseContentRequest) (*QueryAllCourseContentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CourseContentAll not implemented")
}
func (UnimplementedQueryServer) mustEmbedUnimplementedQueryServer() {}

// UnsafeQueryServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to QueryServer will
// result in compilation errors.
type UnsafeQueryServer interface {
	mustEmbedUnimplementedQueryServer()
}

func RegisterQueryServer(s grpc.ServiceRegistrar, srv QueryServer) {
	s.RegisterService(&Query_ServiceDesc, srv)
}

func _Query_Params_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Params(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_Params_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Params(ctx, req.(*QueryParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetAcademicTree_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetAcademicTreeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetAcademicTree(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_GetAcademicTree_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetAcademicTree(ctx, req.(*QueryGetAcademicTreeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_AvailableCourses_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAvailableCoursesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).AvailableCourses(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_AvailableCourses_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).AvailableCourses(ctx, req.(*QueryAvailableCoursesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_CheckEquivalence_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryCheckEquivalenceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).CheckEquivalence(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_CheckEquivalence_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).CheckEquivalence(ctx, req.(*QueryCheckEquivalenceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_CriticalCourses_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryCriticalCoursesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).CriticalCourses(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_CriticalCourses_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).CriticalCourses(ctx, req.(*QueryCriticalCoursesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Institution_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetInstitutionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Institution(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_Institution_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Institution(ctx, req.(*QueryGetInstitutionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_InstitutionAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllInstitutionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).InstitutionAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_InstitutionAll_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).InstitutionAll(ctx, req.(*QueryAllInstitutionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_CourseToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetCourseTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).CourseToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_CourseToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).CourseToken(ctx, req.(*QueryGetCourseTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_CourseTokenAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllCourseTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).CourseTokenAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_CourseTokenAll_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).CourseTokenAll(ctx, req.(*QueryAllCourseTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_CourseEquivalence_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetCourseEquivalenceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).CourseEquivalence(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_CourseEquivalence_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).CourseEquivalence(ctx, req.(*QueryGetCourseEquivalenceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_CourseEquivalenceAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllCourseEquivalenceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).CourseEquivalenceAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_CourseEquivalenceAll_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).CourseEquivalenceAll(ctx, req.(*QueryAllCourseEquivalenceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_CourseContent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetCourseContentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).CourseContent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_CourseContent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).CourseContent(ctx, req.(*QueryGetCourseContentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_CourseContentAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllCourseContentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).CourseContentAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_CourseContentAll_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).CourseContentAll(ctx, req.(*QueryAllCourseContentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Query_ServiceDesc is the grpc.ServiceDesc for Query service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Query_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "academictoken.curriculum.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Params",
			Handler:    _Query_Params_Handler,
		},
		{
			MethodName: "GetAcademicTree",
			Handler:    _Query_GetAcademicTree_Handler,
		},
		{
			MethodName: "AvailableCourses",
			Handler:    _Query_AvailableCourses_Handler,
		},
		{
			MethodName: "CheckEquivalence",
			Handler:    _Query_CheckEquivalence_Handler,
		},
		{
			MethodName: "CriticalCourses",
			Handler:    _Query_CriticalCourses_Handler,
		},
		{
			MethodName: "Institution",
			Handler:    _Query_Institution_Handler,
		},
		{
			MethodName: "InstitutionAll",
			Handler:    _Query_InstitutionAll_Handler,
		},
		{
			MethodName: "CourseToken",
			Handler:    _Query_CourseToken_Handler,
		},
		{
			MethodName: "CourseTokenAll",
			Handler:    _Query_CourseTokenAll_Handler,
		},
		{
			MethodName: "CourseEquivalence",
			Handler:    _Query_CourseEquivalence_Handler,
		},
		{
			MethodName: "CourseEquivalenceAll",
			Handler:    _Query_CourseEquivalenceAll_Handler,
		},
		{
			MethodName: "CourseContent",
			Handler:    _Query_CourseContent_Handler,
		},
		{
			MethodName: "CourseContentAll",
			Handler:    _Query_CourseContentAll_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "academictoken/curriculum/query.proto",
}
