// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: academictoken/academicnft/course_nft.proto

package types

import (
	fmt "fmt"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type CourseNft struct {
	Index                     string   `protobuf:"bytes,1,opt,name=index,proto3" json:"index,omitempty"`
	NftId                     string   `protobuf:"bytes,2,opt,name=nftId,proto3" json:"nftId,omitempty"`
	Creator                   string   `protobuf:"bytes,3,opt,name=creator,proto3" json:"creator,omitempty"`
	Owner                     string   `protobuf:"bytes,4,opt,name=owner,proto3" json:"owner,omitempty"`
	CourseId                  string   `protobuf:"bytes,5,opt,name=courseId,proto3" json:"courseId,omitempty"`
	Institution               string   `protobuf:"bytes,6,opt,name=institution,proto3" json:"institution,omitempty"`
	Title                     string   `protobuf:"bytes,7,opt,name=title,proto3" json:"title,omitempty"`
	Code                      string   `protobuf:"bytes,8,opt,name=code,proto3" json:"code,omitempty"`
	WorkloadHours             uint64   `protobuf:"varint,9,opt,name=workloadHours,proto3" json:"workloadHours,omitempty"`
	Credits                   uint64   `protobuf:"varint,10,opt,name=credits,proto3" json:"credits,omitempty"`
	Description               string   `protobuf:"bytes,11,opt,name=description,proto3" json:"description,omitempty"`
	Objectives                []string `protobuf:"bytes,12,rep,name=objectives,proto3" json:"objectives,omitempty"`
	TopicUnits                []string `protobuf:"bytes,13,rep,name=topicUnits,proto3" json:"topicUnits,omitempty"`
	Methodologies             []string `protobuf:"bytes,14,rep,name=methodologies,proto3" json:"methodologies,omitempty"`
	EvaluationMethods         []string `protobuf:"bytes,15,rep,name=evaluationMethods,proto3" json:"evaluationMethods,omitempty"`
	BibliographyBasic         []string `protobuf:"bytes,16,rep,name=bibliographyBasic,proto3" json:"bibliographyBasic,omitempty"`
	BibliographyComplementary []string `protobuf:"bytes,17,rep,name=bibliographyComplementary,proto3" json:"bibliographyComplementary,omitempty"`
	Keywords                  []string `protobuf:"bytes,18,rep,name=keywords,proto3" json:"keywords,omitempty"`
	ContentHash               string   `protobuf:"bytes,19,opt,name=contentHash,proto3" json:"contentHash,omitempty"`
	CreatedAt                 int32    `protobuf:"varint,20,opt,name=createdAt,proto3" json:"createdAt,omitempty"`
	ApprovedEquivalences      []string `protobuf:"bytes,21,rep,name=approvedEquivalences,proto3" json:"approvedEquivalences,omitempty"`
}

func (m *CourseNft) Reset()         { *m = CourseNft{} }
func (m *CourseNft) String() string { return proto.CompactTextString(m) }
func (*CourseNft) ProtoMessage()    {}
func (*CourseNft) Descriptor() ([]byte, []int) {
	return fileDescriptor_7a738075beaf109f, []int{0}
}
func (m *CourseNft) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CourseNft) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CourseNft.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CourseNft) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CourseNft.Merge(m, src)
}
func (m *CourseNft) XXX_Size() int {
	return m.Size()
}
func (m *CourseNft) XXX_DiscardUnknown() {
	xxx_messageInfo_CourseNft.DiscardUnknown(m)
}

var xxx_messageInfo_CourseNft proto.InternalMessageInfo

func (m *CourseNft) GetIndex() string {
	if m != nil {
		return m.Index
	}
	return ""
}

func (m *CourseNft) GetNftId() string {
	if m != nil {
		return m.NftId
	}
	return ""
}

func (m *CourseNft) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *CourseNft) GetOwner() string {
	if m != nil {
		return m.Owner
	}
	return ""
}

func (m *CourseNft) GetCourseId() string {
	if m != nil {
		return m.CourseId
	}
	return ""
}

func (m *CourseNft) GetInstitution() string {
	if m != nil {
		return m.Institution
	}
	return ""
}

func (m *CourseNft) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *CourseNft) GetCode() string {
	if m != nil {
		return m.Code
	}
	return ""
}

func (m *CourseNft) GetWorkloadHours() uint64 {
	if m != nil {
		return m.WorkloadHours
	}
	return 0
}

func (m *CourseNft) GetCredits() uint64 {
	if m != nil {
		return m.Credits
	}
	return 0
}

func (m *CourseNft) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *CourseNft) GetObjectives() []string {
	if m != nil {
		return m.Objectives
	}
	return nil
}

func (m *CourseNft) GetTopicUnits() []string {
	if m != nil {
		return m.TopicUnits
	}
	return nil
}

func (m *CourseNft) GetMethodologies() []string {
	if m != nil {
		return m.Methodologies
	}
	return nil
}

func (m *CourseNft) GetEvaluationMethods() []string {
	if m != nil {
		return m.EvaluationMethods
	}
	return nil
}

func (m *CourseNft) GetBibliographyBasic() []string {
	if m != nil {
		return m.BibliographyBasic
	}
	return nil
}

func (m *CourseNft) GetBibliographyComplementary() []string {
	if m != nil {
		return m.BibliographyComplementary
	}
	return nil
}

func (m *CourseNft) GetKeywords() []string {
	if m != nil {
		return m.Keywords
	}
	return nil
}

func (m *CourseNft) GetContentHash() string {
	if m != nil {
		return m.ContentHash
	}
	return ""
}

func (m *CourseNft) GetCreatedAt() int32 {
	if m != nil {
		return m.CreatedAt
	}
	return 0
}

func (m *CourseNft) GetApprovedEquivalences() []string {
	if m != nil {
		return m.ApprovedEquivalences
	}
	return nil
}

func init() {
	proto.RegisterType((*CourseNft)(nil), "academictoken.academicnft.CourseNft")
}

func init() {
	proto.RegisterFile("academictoken/academicnft/course_nft.proto", fileDescriptor_7a738075beaf109f)
}

var fileDescriptor_7a738075beaf109f = []byte{
	// 496 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x93, 0xc1, 0x6e, 0x13, 0x3d,
	0x14, 0x85, 0x33, 0x7f, 0x93, 0xb6, 0x71, 0xff, 0x02, 0x35, 0x41, 0x72, 0x11, 0x1a, 0x45, 0x88,
	0x45, 0x84, 0x20, 0x91, 0xca, 0xaa, 0x12, 0x9b, 0xa6, 0x42, 0x6a, 0x17, 0x45, 0x28, 0x85, 0x0d,
	0x1b, 0xe4, 0xd8, 0x37, 0x89, 0xc9, 0xc4, 0x77, 0xb0, 0x6f, 0x92, 0xe6, 0x2d, 0x78, 0x25, 0x76,
	0x2c, 0xbb, 0x64, 0x89, 0x92, 0x17, 0x41, 0xf6, 0x34, 0xed, 0x44, 0x85, 0xdd, 0x9c, 0xef, 0x9c,
	0xb9, 0x3e, 0xf2, 0xcc, 0x65, 0x2f, 0xa5, 0x92, 0x1a, 0x26, 0x46, 0x11, 0x8e, 0xc1, 0x76, 0xd6,
	0xca, 0x0e, 0xa8, 0xa3, 0x70, 0xea, 0x3c, 0x7c, 0xb1, 0x03, 0x6a, 0xe7, 0x0e, 0x09, 0xf9, 0xe1,
	0x46, 0xb6, 0x5d, 0xca, 0x3e, 0xff, 0x51, 0x63, 0xf5, 0xd3, 0x98, 0x7f, 0x3f, 0x20, 0xde, 0x60,
	0x35, 0x63, 0x35, 0x5c, 0x89, 0xa4, 0x99, 0xb4, 0xea, 0xbd, 0x42, 0x04, 0x6a, 0x07, 0x74, 0xae,
	0xc5, 0x7f, 0x05, 0x8d, 0x82, 0x0b, 0xb6, 0xa3, 0x1c, 0x48, 0x42, 0x27, 0xb6, 0x22, 0x5f, 0xcb,
	0x90, 0xc7, 0xb9, 0x05, 0x27, 0xaa, 0x45, 0x3e, 0x0a, 0xfe, 0x94, 0xed, 0x16, 0xc5, 0xce, 0xb5,
	0xa8, 0x45, 0xe3, 0x56, 0xf3, 0x26, 0xdb, 0x33, 0xd6, 0x93, 0xa1, 0x29, 0x19, 0xb4, 0x62, 0x3b,
	0xda, 0x65, 0x14, 0x66, 0x92, 0xa1, 0x0c, 0xc4, 0x4e, 0x31, 0x33, 0x0a, 0xce, 0x59, 0x55, 0xa1,
	0x06, 0xb1, 0x1b, 0x61, 0x7c, 0xe6, 0x2f, 0xd8, 0xfe, 0x1c, 0xdd, 0x38, 0x43, 0xa9, 0xcf, 0xc2,
	0x7c, 0x51, 0x6f, 0x26, 0xad, 0x6a, 0x6f, 0x13, 0xde, 0xb4, 0xd7, 0x86, 0xbc, 0x60, 0xd1, 0x5f,
	0xcb, 0xd0, 0x45, 0x83, 0x57, 0xce, 0xe4, 0xb1, 0xcb, 0x5e, 0xd1, 0xa5, 0x84, 0x78, 0xca, 0x18,
	0xf6, 0xbf, 0x82, 0x22, 0x33, 0x03, 0x2f, 0xfe, 0x6f, 0x6e, 0xb5, 0xea, 0xbd, 0x12, 0x09, 0x3e,
	0x61, 0x6e, 0xd4, 0x27, 0x1b, 0xc6, 0xef, 0x17, 0xfe, 0x1d, 0x09, 0x0d, 0x27, 0x40, 0x23, 0xd4,
	0x98, 0xe1, 0xd0, 0x80, 0x17, 0x0f, 0x62, 0x64, 0x13, 0xf2, 0x57, 0xec, 0x00, 0x66, 0x32, 0x9b,
	0xca, 0x70, 0xe6, 0x45, 0xb4, 0xbc, 0x78, 0x18, 0x93, 0xf7, 0x8d, 0x90, 0xee, 0x9b, 0x7e, 0x66,
	0x70, 0xe8, 0x64, 0x3e, 0x5a, 0x74, 0xa5, 0x37, 0x4a, 0x3c, 0x2a, 0xd2, 0xf7, 0x0c, 0xfe, 0x96,
	0x1d, 0x96, 0xe1, 0x29, 0x4e, 0xf2, 0x0c, 0x26, 0x60, 0x49, 0xba, 0x85, 0x38, 0x88, 0x6f, 0xfd,
	0x3b, 0x10, 0xbe, 0xe4, 0x18, 0x16, 0x73, 0x74, 0xda, 0x0b, 0x1e, 0xc3, 0xb7, 0x3a, 0xdc, 0x9e,
	0x42, 0x4b, 0x60, 0xe9, 0x4c, 0xfa, 0x91, 0x78, 0x5c, 0xdc, 0x5e, 0x09, 0xf1, 0x67, 0xac, 0x1e,
	0x7f, 0x14, 0xd0, 0x27, 0x24, 0x1a, 0xcd, 0xa4, 0x55, 0xeb, 0xdd, 0x01, 0x7e, 0xc4, 0x1a, 0x32,
	0xcf, 0x1d, 0xce, 0x40, 0xbf, 0xfb, 0x36, 0x35, 0x33, 0x99, 0x81, 0x55, 0xe0, 0xc5, 0x93, 0x78,
	0xce, 0x5f, 0xbd, 0xee, 0xe5, 0xcf, 0x65, 0x9a, 0x5c, 0x2f, 0xd3, 0xe4, 0xf7, 0x32, 0x4d, 0xbe,
	0xaf, 0xd2, 0xca, 0xf5, 0x2a, 0xad, 0xfc, 0x5a, 0xa5, 0x95, 0xcf, 0xc7, 0x43, 0x43, 0xa3, 0x69,
	0xbf, 0xad, 0x70, 0xd2, 0xe9, 0x1a, 0x69, 0x95, 0x7c, 0x7d, 0x74, 0x7c, 0x71, 0xf9, 0xa1, 0x73,
	0x72, 0xb3, 0x02, 0x1f, 0xe3, 0xf2, 0x5c, 0x6d, 0xac, 0x0f, 0x2d, 0x72, 0xf0, 0xfd, 0xed, 0xb8,
	0x3a, 0x6f, 0xfe, 0x04, 0x00, 0x00, 0xff, 0xff, 0x84, 0x7d, 0x3b, 0xce, 0x68, 0x03, 0x00, 0x00,
}

func (m *CourseNft) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CourseNft) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CourseNft) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ApprovedEquivalences) > 0 {
		for iNdEx := len(m.ApprovedEquivalences) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.ApprovedEquivalences[iNdEx])
			copy(dAtA[i:], m.ApprovedEquivalences[iNdEx])
			i = encodeVarintCourseNft(dAtA, i, uint64(len(m.ApprovedEquivalences[iNdEx])))
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0xaa
		}
	}
	if m.CreatedAt != 0 {
		i = encodeVarintCourseNft(dAtA, i, uint64(m.CreatedAt))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa0
	}
	if len(m.ContentHash) > 0 {
		i -= len(m.ContentHash)
		copy(dAtA[i:], m.ContentHash)
		i = encodeVarintCourseNft(dAtA, i, uint64(len(m.ContentHash)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x9a
	}
	if len(m.Keywords) > 0 {
		for iNdEx := len(m.Keywords) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Keywords[iNdEx])
			copy(dAtA[i:], m.Keywords[iNdEx])
			i = encodeVarintCourseNft(dAtA, i, uint64(len(m.Keywords[iNdEx])))
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0x92
		}
	}
	if len(m.BibliographyComplementary) > 0 {
		for iNdEx := len(m.BibliographyComplementary) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.BibliographyComplementary[iNdEx])
			copy(dAtA[i:], m.BibliographyComplementary[iNdEx])
			i = encodeVarintCourseNft(dAtA, i, uint64(len(m.BibliographyComplementary[iNdEx])))
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0x8a
		}
	}
	if len(m.BibliographyBasic) > 0 {
		for iNdEx := len(m.BibliographyBasic) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.BibliographyBasic[iNdEx])
			copy(dAtA[i:], m.BibliographyBasic[iNdEx])
			i = encodeVarintCourseNft(dAtA, i, uint64(len(m.BibliographyBasic[iNdEx])))
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0x82
		}
	}
	if len(m.EvaluationMethods) > 0 {
		for iNdEx := len(m.EvaluationMethods) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.EvaluationMethods[iNdEx])
			copy(dAtA[i:], m.EvaluationMethods[iNdEx])
			i = encodeVarintCourseNft(dAtA, i, uint64(len(m.EvaluationMethods[iNdEx])))
			i--
			dAtA[i] = 0x7a
		}
	}
	if len(m.Methodologies) > 0 {
		for iNdEx := len(m.Methodologies) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Methodologies[iNdEx])
			copy(dAtA[i:], m.Methodologies[iNdEx])
			i = encodeVarintCourseNft(dAtA, i, uint64(len(m.Methodologies[iNdEx])))
			i--
			dAtA[i] = 0x72
		}
	}
	if len(m.TopicUnits) > 0 {
		for iNdEx := len(m.TopicUnits) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.TopicUnits[iNdEx])
			copy(dAtA[i:], m.TopicUnits[iNdEx])
			i = encodeVarintCourseNft(dAtA, i, uint64(len(m.TopicUnits[iNdEx])))
			i--
			dAtA[i] = 0x6a
		}
	}
	if len(m.Objectives) > 0 {
		for iNdEx := len(m.Objectives) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Objectives[iNdEx])
			copy(dAtA[i:], m.Objectives[iNdEx])
			i = encodeVarintCourseNft(dAtA, i, uint64(len(m.Objectives[iNdEx])))
			i--
			dAtA[i] = 0x62
		}
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintCourseNft(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x5a
	}
	if m.Credits != 0 {
		i = encodeVarintCourseNft(dAtA, i, uint64(m.Credits))
		i--
		dAtA[i] = 0x50
	}
	if m.WorkloadHours != 0 {
		i = encodeVarintCourseNft(dAtA, i, uint64(m.WorkloadHours))
		i--
		dAtA[i] = 0x48
	}
	if len(m.Code) > 0 {
		i -= len(m.Code)
		copy(dAtA[i:], m.Code)
		i = encodeVarintCourseNft(dAtA, i, uint64(len(m.Code)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.Title) > 0 {
		i -= len(m.Title)
		copy(dAtA[i:], m.Title)
		i = encodeVarintCourseNft(dAtA, i, uint64(len(m.Title)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.Institution) > 0 {
		i -= len(m.Institution)
		copy(dAtA[i:], m.Institution)
		i = encodeVarintCourseNft(dAtA, i, uint64(len(m.Institution)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.CourseId) > 0 {
		i -= len(m.CourseId)
		copy(dAtA[i:], m.CourseId)
		i = encodeVarintCourseNft(dAtA, i, uint64(len(m.CourseId)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Owner) > 0 {
		i -= len(m.Owner)
		copy(dAtA[i:], m.Owner)
		i = encodeVarintCourseNft(dAtA, i, uint64(len(m.Owner)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintCourseNft(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.NftId) > 0 {
		i -= len(m.NftId)
		copy(dAtA[i:], m.NftId)
		i = encodeVarintCourseNft(dAtA, i, uint64(len(m.NftId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Index) > 0 {
		i -= len(m.Index)
		copy(dAtA[i:], m.Index)
		i = encodeVarintCourseNft(dAtA, i, uint64(len(m.Index)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintCourseNft(dAtA []byte, offset int, v uint64) int {
	offset -= sovCourseNft(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *CourseNft) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Index)
	if l > 0 {
		n += 1 + l + sovCourseNft(uint64(l))
	}
	l = len(m.NftId)
	if l > 0 {
		n += 1 + l + sovCourseNft(uint64(l))
	}
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovCourseNft(uint64(l))
	}
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovCourseNft(uint64(l))
	}
	l = len(m.CourseId)
	if l > 0 {
		n += 1 + l + sovCourseNft(uint64(l))
	}
	l = len(m.Institution)
	if l > 0 {
		n += 1 + l + sovCourseNft(uint64(l))
	}
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovCourseNft(uint64(l))
	}
	l = len(m.Code)
	if l > 0 {
		n += 1 + l + sovCourseNft(uint64(l))
	}
	if m.WorkloadHours != 0 {
		n += 1 + sovCourseNft(uint64(m.WorkloadHours))
	}
	if m.Credits != 0 {
		n += 1 + sovCourseNft(uint64(m.Credits))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovCourseNft(uint64(l))
	}
	if len(m.Objectives) > 0 {
		for _, s := range m.Objectives {
			l = len(s)
			n += 1 + l + sovCourseNft(uint64(l))
		}
	}
	if len(m.TopicUnits) > 0 {
		for _, s := range m.TopicUnits {
			l = len(s)
			n += 1 + l + sovCourseNft(uint64(l))
		}
	}
	if len(m.Methodologies) > 0 {
		for _, s := range m.Methodologies {
			l = len(s)
			n += 1 + l + sovCourseNft(uint64(l))
		}
	}
	if len(m.EvaluationMethods) > 0 {
		for _, s := range m.EvaluationMethods {
			l = len(s)
			n += 1 + l + sovCourseNft(uint64(l))
		}
	}
	if len(m.BibliographyBasic) > 0 {
		for _, s := range m.BibliographyBasic {
			l = len(s)
			n += 2 + l + sovCourseNft(uint64(l))
		}
	}
	if len(m.BibliographyComplementary) > 0 {
		for _, s := range m.BibliographyComplementary {
			l = len(s)
			n += 2 + l + sovCourseNft(uint64(l))
		}
	}
	if len(m.Keywords) > 0 {
		for _, s := range m.Keywords {
			l = len(s)
			n += 2 + l + sovCourseNft(uint64(l))
		}
	}
	l = len(m.ContentHash)
	if l > 0 {
		n += 2 + l + sovCourseNft(uint64(l))
	}
	if m.CreatedAt != 0 {
		n += 2 + sovCourseNft(uint64(m.CreatedAt))
	}
	if len(m.ApprovedEquivalences) > 0 {
		for _, s := range m.ApprovedEquivalences {
			l = len(s)
			n += 2 + l + sovCourseNft(uint64(l))
		}
	}
	return n
}

func sovCourseNft(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozCourseNft(x uint64) (n int) {
	return sovCourseNft(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *CourseNft) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCourseNft
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CourseNft: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CourseNft: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCourseNft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCourseNft
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCourseNft
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Index = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NftId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCourseNft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCourseNft
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCourseNft
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NftId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCourseNft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCourseNft
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCourseNft
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCourseNft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCourseNft
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCourseNft
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CourseId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCourseNft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCourseNft
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCourseNft
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CourseId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Institution", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCourseNft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCourseNft
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCourseNft
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Institution = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCourseNft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCourseNft
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCourseNft
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCourseNft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCourseNft
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCourseNft
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Code = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WorkloadHours", wireType)
			}
			m.WorkloadHours = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCourseNft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.WorkloadHours |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Credits", wireType)
			}
			m.Credits = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCourseNft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Credits |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCourseNft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCourseNft
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCourseNft
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Objectives", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCourseNft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCourseNft
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCourseNft
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Objectives = append(m.Objectives, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TopicUnits", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCourseNft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCourseNft
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCourseNft
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TopicUnits = append(m.TopicUnits, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Methodologies", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCourseNft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCourseNft
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCourseNft
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Methodologies = append(m.Methodologies, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EvaluationMethods", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCourseNft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCourseNft
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCourseNft
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EvaluationMethods = append(m.EvaluationMethods, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BibliographyBasic", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCourseNft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCourseNft
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCourseNft
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BibliographyBasic = append(m.BibliographyBasic, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BibliographyComplementary", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCourseNft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCourseNft
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCourseNft
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BibliographyComplementary = append(m.BibliographyComplementary, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 18:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Keywords", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCourseNft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCourseNft
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCourseNft
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Keywords = append(m.Keywords, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 19:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContentHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCourseNft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCourseNft
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCourseNft
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContentHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 20:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			m.CreatedAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCourseNft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CreatedAt |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 21:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApprovedEquivalences", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCourseNft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCourseNft
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCourseNft
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ApprovedEquivalences = append(m.ApprovedEquivalences, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCourseNft(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCourseNft
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipCourseNft(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowCourseNft
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCourseNft
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCourseNft
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthCourseNft
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupCourseNft
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthCourseNft
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthCourseNft        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowCourseNft          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupCourseNft = fmt.Errorf("proto: unexpected end of group")
)
