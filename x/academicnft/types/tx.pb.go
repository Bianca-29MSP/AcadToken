// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: academictoken/academicnft/tx.proto

package types

import (
	context "context"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	_ "github.com/cosmos/cosmos-sdk/types/msgservice"
	_ "github.com/cosmos/cosmos-sdk/types/tx/amino"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// MsgUpdateParams is the Msg/UpdateParams request type.
type MsgUpdateParams struct {
	// authority is the address that controls the module (defaults to x/gov unless overwritten).
	Authority string `protobuf:"bytes,1,opt,name=authority,proto3" json:"authority,omitempty"`
	// NOTE: All parameters must be supplied.
	Params Params `protobuf:"bytes,2,opt,name=params,proto3" json:"params"`
}

func (m *MsgUpdateParams) Reset()         { *m = MsgUpdateParams{} }
func (m *MsgUpdateParams) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateParams) ProtoMessage()    {}
func (*MsgUpdateParams) Descriptor() ([]byte, []int) {
	return fileDescriptor_8f6b8d9858bc1d2a, []int{0}
}
func (m *MsgUpdateParams) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateParams) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateParams.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateParams) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateParams.Merge(m, src)
}
func (m *MsgUpdateParams) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateParams) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateParams.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateParams proto.InternalMessageInfo

func (m *MsgUpdateParams) GetAuthority() string {
	if m != nil {
		return m.Authority
	}
	return ""
}

func (m *MsgUpdateParams) GetParams() Params {
	if m != nil {
		return m.Params
	}
	return Params{}
}

// MsgUpdateParamsResponse defines the response structure for executing a
// MsgUpdateParams message.
type MsgUpdateParamsResponse struct {
}

func (m *MsgUpdateParamsResponse) Reset()         { *m = MsgUpdateParamsResponse{} }
func (m *MsgUpdateParamsResponse) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateParamsResponse) ProtoMessage()    {}
func (*MsgUpdateParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_8f6b8d9858bc1d2a, []int{1}
}
func (m *MsgUpdateParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateParamsResponse.Merge(m, src)
}
func (m *MsgUpdateParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateParamsResponse proto.InternalMessageInfo

type MsgMintCourseNft struct {
	Creator                   string   `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	CourseId                  string   `protobuf:"bytes,2,opt,name=courseId,proto3" json:"courseId,omitempty"`
	Institution               string   `protobuf:"bytes,3,opt,name=institution,proto3" json:"institution,omitempty"`
	Title                     string   `protobuf:"bytes,4,opt,name=title,proto3" json:"title,omitempty"`
	Code                      string   `protobuf:"bytes,5,opt,name=code,proto3" json:"code,omitempty"`
	WorkloadHours             uint64   `protobuf:"varint,6,opt,name=workloadHours,proto3" json:"workloadHours,omitempty"`
	Credits                   uint64   `protobuf:"varint,7,opt,name=credits,proto3" json:"credits,omitempty"`
	Description               string   `protobuf:"bytes,8,opt,name=description,proto3" json:"description,omitempty"`
	Objectives                []string `protobuf:"bytes,9,rep,name=objectives,proto3" json:"objectives,omitempty"`
	TopicUnits                []string `protobuf:"bytes,10,rep,name=topicUnits,proto3" json:"topicUnits,omitempty"`
	Methodologies             []string `protobuf:"bytes,11,rep,name=methodologies,proto3" json:"methodologies,omitempty"`
	EvaluationMethods         []string `protobuf:"bytes,12,rep,name=evaluationMethods,proto3" json:"evaluationMethods,omitempty"`
	BibliographyBasic         []string `protobuf:"bytes,13,rep,name=bibliographyBasic,proto3" json:"bibliographyBasic,omitempty"`
	BibliographyComplementary []string `protobuf:"bytes,14,rep,name=bibliographyComplementary,proto3" json:"bibliographyComplementary,omitempty"`
	Keywords                  []string `protobuf:"bytes,15,rep,name=keywords,proto3" json:"keywords,omitempty"`
	ContentHash               string   `protobuf:"bytes,16,opt,name=contentHash,proto3" json:"contentHash,omitempty"`
}

func (m *MsgMintCourseNft) Reset()         { *m = MsgMintCourseNft{} }
func (m *MsgMintCourseNft) String() string { return proto.CompactTextString(m) }
func (*MsgMintCourseNft) ProtoMessage()    {}
func (*MsgMintCourseNft) Descriptor() ([]byte, []int) {
	return fileDescriptor_8f6b8d9858bc1d2a, []int{2}
}
func (m *MsgMintCourseNft) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgMintCourseNft) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgMintCourseNft.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgMintCourseNft) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgMintCourseNft.Merge(m, src)
}
func (m *MsgMintCourseNft) XXX_Size() int {
	return m.Size()
}
func (m *MsgMintCourseNft) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgMintCourseNft.DiscardUnknown(m)
}

var xxx_messageInfo_MsgMintCourseNft proto.InternalMessageInfo

func (m *MsgMintCourseNft) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgMintCourseNft) GetCourseId() string {
	if m != nil {
		return m.CourseId
	}
	return ""
}

func (m *MsgMintCourseNft) GetInstitution() string {
	if m != nil {
		return m.Institution
	}
	return ""
}

func (m *MsgMintCourseNft) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *MsgMintCourseNft) GetCode() string {
	if m != nil {
		return m.Code
	}
	return ""
}

func (m *MsgMintCourseNft) GetWorkloadHours() uint64 {
	if m != nil {
		return m.WorkloadHours
	}
	return 0
}

func (m *MsgMintCourseNft) GetCredits() uint64 {
	if m != nil {
		return m.Credits
	}
	return 0
}

func (m *MsgMintCourseNft) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *MsgMintCourseNft) GetObjectives() []string {
	if m != nil {
		return m.Objectives
	}
	return nil
}

func (m *MsgMintCourseNft) GetTopicUnits() []string {
	if m != nil {
		return m.TopicUnits
	}
	return nil
}

func (m *MsgMintCourseNft) GetMethodologies() []string {
	if m != nil {
		return m.Methodologies
	}
	return nil
}

func (m *MsgMintCourseNft) GetEvaluationMethods() []string {
	if m != nil {
		return m.EvaluationMethods
	}
	return nil
}

func (m *MsgMintCourseNft) GetBibliographyBasic() []string {
	if m != nil {
		return m.BibliographyBasic
	}
	return nil
}

func (m *MsgMintCourseNft) GetBibliographyComplementary() []string {
	if m != nil {
		return m.BibliographyComplementary
	}
	return nil
}

func (m *MsgMintCourseNft) GetKeywords() []string {
	if m != nil {
		return m.Keywords
	}
	return nil
}

func (m *MsgMintCourseNft) GetContentHash() string {
	if m != nil {
		return m.ContentHash
	}
	return ""
}

type MsgMintCourseNftResponse struct {
}

func (m *MsgMintCourseNftResponse) Reset()         { *m = MsgMintCourseNftResponse{} }
func (m *MsgMintCourseNftResponse) String() string { return proto.CompactTextString(m) }
func (*MsgMintCourseNftResponse) ProtoMessage()    {}
func (*MsgMintCourseNftResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_8f6b8d9858bc1d2a, []int{3}
}
func (m *MsgMintCourseNftResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgMintCourseNftResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgMintCourseNftResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgMintCourseNftResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgMintCourseNftResponse.Merge(m, src)
}
func (m *MsgMintCourseNftResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgMintCourseNftResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgMintCourseNftResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgMintCourseNftResponse proto.InternalMessageInfo

type MsgTransferCourseNft struct {
	Creator   string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	NftId     string `protobuf:"bytes,2,opt,name=nftId,proto3" json:"nftId,omitempty"`
	Recipient string `protobuf:"bytes,3,opt,name=recipient,proto3" json:"recipient,omitempty"`
}

func (m *MsgTransferCourseNft) Reset()         { *m = MsgTransferCourseNft{} }
func (m *MsgTransferCourseNft) String() string { return proto.CompactTextString(m) }
func (*MsgTransferCourseNft) ProtoMessage()    {}
func (*MsgTransferCourseNft) Descriptor() ([]byte, []int) {
	return fileDescriptor_8f6b8d9858bc1d2a, []int{4}
}
func (m *MsgTransferCourseNft) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgTransferCourseNft) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgTransferCourseNft.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgTransferCourseNft) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgTransferCourseNft.Merge(m, src)
}
func (m *MsgTransferCourseNft) XXX_Size() int {
	return m.Size()
}
func (m *MsgTransferCourseNft) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgTransferCourseNft.DiscardUnknown(m)
}

var xxx_messageInfo_MsgTransferCourseNft proto.InternalMessageInfo

func (m *MsgTransferCourseNft) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgTransferCourseNft) GetNftId() string {
	if m != nil {
		return m.NftId
	}
	return ""
}

func (m *MsgTransferCourseNft) GetRecipient() string {
	if m != nil {
		return m.Recipient
	}
	return ""
}

type MsgTransferCourseNftResponse struct {
}

func (m *MsgTransferCourseNftResponse) Reset()         { *m = MsgTransferCourseNftResponse{} }
func (m *MsgTransferCourseNftResponse) String() string { return proto.CompactTextString(m) }
func (*MsgTransferCourseNftResponse) ProtoMessage()    {}
func (*MsgTransferCourseNftResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_8f6b8d9858bc1d2a, []int{5}
}
func (m *MsgTransferCourseNftResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgTransferCourseNftResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgTransferCourseNftResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgTransferCourseNftResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgTransferCourseNftResponse.Merge(m, src)
}
func (m *MsgTransferCourseNftResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgTransferCourseNftResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgTransferCourseNftResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgTransferCourseNftResponse proto.InternalMessageInfo

type MsgApproveEquivalence struct {
	Creator       string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	NftId1        string `protobuf:"bytes,2,opt,name=nftId1,proto3" json:"nftId1,omitempty"`
	NftId2        string `protobuf:"bytes,3,opt,name=nftId2,proto3" json:"nftId2,omitempty"`
	Score         string `protobuf:"bytes,4,opt,name=score,proto3" json:"score,omitempty"`
	Justification string `protobuf:"bytes,5,opt,name=justification,proto3" json:"justification,omitempty"`
}

func (m *MsgApproveEquivalence) Reset()         { *m = MsgApproveEquivalence{} }
func (m *MsgApproveEquivalence) String() string { return proto.CompactTextString(m) }
func (*MsgApproveEquivalence) ProtoMessage()    {}
func (*MsgApproveEquivalence) Descriptor() ([]byte, []int) {
	return fileDescriptor_8f6b8d9858bc1d2a, []int{6}
}
func (m *MsgApproveEquivalence) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgApproveEquivalence) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgApproveEquivalence.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgApproveEquivalence) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgApproveEquivalence.Merge(m, src)
}
func (m *MsgApproveEquivalence) XXX_Size() int {
	return m.Size()
}
func (m *MsgApproveEquivalence) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgApproveEquivalence.DiscardUnknown(m)
}

var xxx_messageInfo_MsgApproveEquivalence proto.InternalMessageInfo

func (m *MsgApproveEquivalence) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgApproveEquivalence) GetNftId1() string {
	if m != nil {
		return m.NftId1
	}
	return ""
}

func (m *MsgApproveEquivalence) GetNftId2() string {
	if m != nil {
		return m.NftId2
	}
	return ""
}

func (m *MsgApproveEquivalence) GetScore() string {
	if m != nil {
		return m.Score
	}
	return ""
}

func (m *MsgApproveEquivalence) GetJustification() string {
	if m != nil {
		return m.Justification
	}
	return ""
}

type MsgApproveEquivalenceResponse struct {
}

func (m *MsgApproveEquivalenceResponse) Reset()         { *m = MsgApproveEquivalenceResponse{} }
func (m *MsgApproveEquivalenceResponse) String() string { return proto.CompactTextString(m) }
func (*MsgApproveEquivalenceResponse) ProtoMessage()    {}
func (*MsgApproveEquivalenceResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_8f6b8d9858bc1d2a, []int{7}
}
func (m *MsgApproveEquivalenceResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgApproveEquivalenceResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgApproveEquivalenceResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgApproveEquivalenceResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgApproveEquivalenceResponse.Merge(m, src)
}
func (m *MsgApproveEquivalenceResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgApproveEquivalenceResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgApproveEquivalenceResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgApproveEquivalenceResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*MsgUpdateParams)(nil), "academictoken.academicnft.MsgUpdateParams")
	proto.RegisterType((*MsgUpdateParamsResponse)(nil), "academictoken.academicnft.MsgUpdateParamsResponse")
	proto.RegisterType((*MsgMintCourseNft)(nil), "academictoken.academicnft.MsgMintCourseNft")
	proto.RegisterType((*MsgMintCourseNftResponse)(nil), "academictoken.academicnft.MsgMintCourseNftResponse")
	proto.RegisterType((*MsgTransferCourseNft)(nil), "academictoken.academicnft.MsgTransferCourseNft")
	proto.RegisterType((*MsgTransferCourseNftResponse)(nil), "academictoken.academicnft.MsgTransferCourseNftResponse")
	proto.RegisterType((*MsgApproveEquivalence)(nil), "academictoken.academicnft.MsgApproveEquivalence")
	proto.RegisterType((*MsgApproveEquivalenceResponse)(nil), "academictoken.academicnft.MsgApproveEquivalenceResponse")
}

func init() {
	proto.RegisterFile("academictoken/academicnft/tx.proto", fileDescriptor_8f6b8d9858bc1d2a)
}

var fileDescriptor_8f6b8d9858bc1d2a = []byte{
	// 826 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x55, 0xcf, 0x8f, 0xdb, 0x44,
	0x14, 0x8e, 0xc9, 0x8f, 0x36, 0xb3, 0xbb, 0xb4, 0x3b, 0x0a, 0x74, 0x62, 0x15, 0x37, 0x44, 0x08,
	0x45, 0x29, 0x8d, 0x69, 0x2a, 0x01, 0xad, 0x10, 0xd2, 0xa6, 0x20, 0x95, 0x83, 0x51, 0x95, 0x6d,
	0x2f, 0x5c, 0xd0, 0x64, 0x3c, 0x71, 0xa6, 0x1b, 0xcf, 0xb8, 0x33, 0x93, 0xb4, 0x39, 0x20, 0x55,
	0x1c, 0x39, 0xf1, 0x67, 0x20, 0x71, 0xd9, 0x03, 0x7f, 0x01, 0xa7, 0xde, 0x58, 0x71, 0xe2, 0x84,
	0xd0, 0xee, 0x61, 0xcf, 0xfc, 0x07, 0xc8, 0x63, 0xc7, 0x89, 0x93, 0x6c, 0xb4, 0x7b, 0x49, 0xfc,
	0xbe, 0xf7, 0xbd, 0xf7, 0xbe, 0x67, 0x7f, 0x9a, 0x01, 0x4d, 0x4c, 0xb0, 0x4f, 0x43, 0x46, 0xb4,
	0x38, 0xa2, 0xdc, 0x9d, 0x47, 0x7c, 0xa8, 0x5d, 0xfd, 0xba, 0x13, 0x49, 0xa1, 0x05, 0xac, 0xe7,
	0x38, 0x9d, 0x25, 0x8e, 0xbd, 0x8f, 0x43, 0xc6, 0x85, 0x6b, 0x7e, 0x13, 0xb6, 0x7d, 0x8b, 0x08,
	0x15, 0x0a, 0xe5, 0x86, 0x2a, 0x70, 0xa7, 0xf7, 0xe3, 0xbf, 0x34, 0x51, 0x4f, 0x12, 0x3f, 0x98,
	0xc8, 0x4d, 0x82, 0x34, 0x55, 0x0b, 0x44, 0x20, 0x12, 0x3c, 0x7e, 0x4a, 0xd1, 0x8f, 0x2f, 0xd6,
	0x16, 0x61, 0x89, 0xc3, 0xb4, 0xba, 0xf9, 0xa7, 0x05, 0x6e, 0x78, 0x2a, 0x78, 0x1e, 0xf9, 0x58,
	0xd3, 0xa7, 0x26, 0x03, 0x3f, 0x03, 0x55, 0x3c, 0xd1, 0x23, 0x21, 0x99, 0x9e, 0x21, 0xab, 0x61,
	0xb5, 0xaa, 0x3d, 0xf4, 0xd7, 0xef, 0xf7, 0x6a, 0xe9, 0xd8, 0x03, 0xdf, 0x97, 0x54, 0xa9, 0x43,
	0x2d, 0x19, 0x0f, 0xfa, 0x0b, 0x2a, 0xfc, 0x1a, 0x54, 0x92, 0xde, 0xe8, 0x9d, 0x86, 0xd5, 0xda,
	0xe9, 0x7e, 0xd8, 0xb9, 0x70, 0xf9, 0x4e, 0x32, 0xaa, 0x57, 0x7d, 0xfb, 0xcf, 0x9d, 0xc2, 0xaf,
	0xe7, 0xc7, 0x6d, 0xab, 0x9f, 0xd6, 0x3e, 0xfa, 0xea, 0xa7, 0xf3, 0xe3, 0xf6, 0xa2, 0xeb, 0xcf,
	0xe7, 0xc7, 0xed, 0xbb, 0xf9, 0x65, 0x5e, 0xe7, 0xd6, 0x59, 0x51, 0xdf, 0xac, 0x83, 0x5b, 0x2b,
	0x50, 0x9f, 0xaa, 0x48, 0x70, 0x45, 0x9b, 0x7f, 0x94, 0xc0, 0x4d, 0x4f, 0x05, 0x1e, 0xe3, 0xfa,
	0xb1, 0x98, 0x48, 0x45, 0xbf, 0x1b, 0x6a, 0x88, 0xc0, 0x35, 0x22, 0x29, 0xd6, 0x42, 0x26, 0xbb,
	0xf6, 0xe7, 0x21, 0xb4, 0xc1, 0x75, 0x62, 0x68, 0xdf, 0xfa, 0x66, 0xa3, 0x6a, 0x3f, 0x8b, 0x61,
	0x03, 0xec, 0x30, 0xae, 0x34, 0xd3, 0x13, 0xcd, 0x04, 0x47, 0x45, 0x93, 0x5e, 0x86, 0x60, 0x0d,
	0x94, 0x35, 0xd3, 0x63, 0x8a, 0x4a, 0x26, 0x97, 0x04, 0x10, 0x82, 0x12, 0x11, 0x3e, 0x45, 0x65,
	0x03, 0x9a, 0x67, 0xf8, 0x11, 0xd8, 0x7b, 0x25, 0xe4, 0xd1, 0x58, 0x60, 0xff, 0x49, 0xdc, 0x1f,
	0x55, 0x1a, 0x56, 0xab, 0xd4, 0xcf, 0x83, 0xa9, 0x4e, 0x9f, 0x69, 0x85, 0xae, 0x99, 0xfc, 0x3c,
	0x8c, 0xb5, 0xf8, 0x54, 0x11, 0xc9, 0x22, 0xa3, 0xe5, 0x7a, 0xa2, 0x65, 0x09, 0x82, 0x0e, 0x00,
	0x62, 0xf0, 0x82, 0x12, 0xcd, 0xa6, 0x54, 0xa1, 0x6a, 0xa3, 0xd8, 0xaa, 0xf6, 0x97, 0x90, 0x38,
	0xaf, 0x45, 0xc4, 0xc8, 0x73, 0x1e, 0xb7, 0x07, 0x49, 0x7e, 0x81, 0xc4, 0x0a, 0x43, 0xaa, 0x47,
	0xc2, 0x17, 0x63, 0x11, 0x30, 0xaa, 0xd0, 0x8e, 0xa1, 0xe4, 0x41, 0xf8, 0x09, 0xd8, 0xa7, 0x53,
	0x3c, 0x9e, 0xe0, 0x78, 0xa6, 0x67, 0x52, 0x0a, 0xed, 0x1a, 0xe6, 0x7a, 0x22, 0x66, 0x0f, 0xd8,
	0x60, 0xcc, 0x44, 0x20, 0x71, 0x34, 0x9a, 0xf5, 0xb0, 0x62, 0x04, 0xed, 0x25, 0xec, 0xb5, 0x04,
	0xfc, 0x12, 0xd4, 0x97, 0xc1, 0xc7, 0x22, 0x8c, 0xc6, 0x34, 0xa4, 0x5c, 0x63, 0x39, 0x43, 0xef,
	0x9a, 0xaa, 0x8b, 0x09, 0xf1, 0x97, 0x3c, 0xa2, 0xb3, 0x57, 0x42, 0xfa, 0x0a, 0xdd, 0x30, 0xe4,
	0x2c, 0x8e, 0xdf, 0x1e, 0x11, 0x5c, 0x53, 0xae, 0x9f, 0x60, 0x35, 0x42, 0x37, 0x93, 0xb7, 0xb7,
	0x04, 0x3d, 0xda, 0x8d, 0x1d, 0x39, 0x77, 0x45, 0xd3, 0x06, 0x68, 0xd5, 0x43, 0x99, 0xc1, 0x24,
	0xa8, 0x79, 0x2a, 0x78, 0x26, 0x31, 0x57, 0x43, 0x2a, 0x2f, 0xe3, 0xb1, 0x1a, 0x28, 0xf3, 0xa1,
	0xce, 0x0c, 0x96, 0x04, 0xf0, 0x36, 0xa8, 0x4a, 0x4a, 0x58, 0xc4, 0x28, 0xd7, 0xa9, 0xb7, 0x16,
	0xc0, 0x8a, 0x1e, 0x07, 0xdc, 0xde, 0x34, 0x33, 0xd3, 0xf4, 0x9b, 0x05, 0xde, 0xf3, 0x54, 0x70,
	0x10, 0x45, 0x52, 0x4c, 0xe9, 0x37, 0x2f, 0x27, 0x6c, 0x8a, 0xc7, 0x94, 0x13, 0xba, 0x45, 0xd5,
	0xfb, 0xa0, 0x62, 0x84, 0xdc, 0x4f, 0x65, 0xa5, 0x51, 0x86, 0x77, 0x53, 0x51, 0x69, 0x14, 0x6f,
	0xa1, 0x88, 0x90, 0x99, 0xd7, 0x4d, 0x10, 0xbb, 0xe6, 0xc5, 0x44, 0x69, 0x36, 0x64, 0xc4, 0x7c,
	0xf9, 0xd4, 0xf4, 0x79, 0x70, 0x65, 0x9b, 0x3b, 0xe0, 0x83, 0x8d, 0x62, 0xe7, 0xeb, 0x74, 0xff,
	0x2b, 0x82, 0xa2, 0xa7, 0x02, 0xc8, 0xc1, 0x6e, 0xee, 0xd0, 0x6a, 0x6f, 0x39, 0x6c, 0x56, 0xce,
	0x03, 0xbb, 0x7b, 0x79, 0xee, 0x7c, 0x2e, 0x7c, 0x09, 0xf6, 0xf2, 0xe7, 0xc6, 0xdd, 0xed, 0x4d,
	0x72, 0x64, 0xfb, 0xc1, 0x15, 0xc8, 0xd9, 0xc8, 0x1f, 0xc1, 0xfe, 0xba, 0x95, 0xdc, 0xed, 0x9d,
	0xd6, 0x0a, 0xec, 0xcf, 0xaf, 0x58, 0x90, 0x8d, 0x7f, 0x63, 0x01, 0xb8, 0xc1, 0x35, 0x9f, 0x6e,
	0xef, 0xb7, 0x5e, 0x61, 0x7f, 0x71, 0xd5, 0x8a, 0xb9, 0x04, 0xbb, 0xfc, 0x26, 0xbe, 0x1a, 0x7a,
	0x87, 0x6f, 0x4f, 0x1d, 0xeb, 0xe4, 0xd4, 0xb1, 0xfe, 0x3d, 0x75, 0xac, 0x5f, 0xce, 0x9c, 0xc2,
	0xc9, 0x99, 0x53, 0xf8, 0xfb, 0xcc, 0x29, 0x7c, 0xff, 0x30, 0x60, 0x7a, 0x34, 0x19, 0x74, 0x88,
	0x08, 0xdd, 0x1e, 0xc3, 0x9c, 0xe0, 0x7b, 0xdd, 0x87, 0xde, 0xe1, 0x53, 0xf7, 0x20, 0x9d, 0xf1,
	0x6c, 0xc3, 0x8d, 0xa1, 0x67, 0x11, 0x55, 0x83, 0x8a, 0xb9, 0x00, 0x1f, 0xfc, 0x1f, 0x00, 0x00,
	0xff, 0xff, 0xd4, 0xc9, 0x4b, 0x3c, 0xc6, 0x07, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MsgClient interface {
	// UpdateParams defines a (governance) operation for updating the module
	// parameters. The authority defaults to the x/gov module account.
	UpdateParams(ctx context.Context, in *MsgUpdateParams, opts ...grpc.CallOption) (*MsgUpdateParamsResponse, error)
	MintCourseNft(ctx context.Context, in *MsgMintCourseNft, opts ...grpc.CallOption) (*MsgMintCourseNftResponse, error)
	TransferCourseNft(ctx context.Context, in *MsgTransferCourseNft, opts ...grpc.CallOption) (*MsgTransferCourseNftResponse, error)
	ApproveEquivalence(ctx context.Context, in *MsgApproveEquivalence, opts ...grpc.CallOption) (*MsgApproveEquivalenceResponse, error)
}

type msgClient struct {
	cc grpc1.ClientConn
}

func NewMsgClient(cc grpc1.ClientConn) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) UpdateParams(ctx context.Context, in *MsgUpdateParams, opts ...grpc.CallOption) (*MsgUpdateParamsResponse, error) {
	out := new(MsgUpdateParamsResponse)
	err := c.cc.Invoke(ctx, "/academictoken.academicnft.Msg/UpdateParams", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) MintCourseNft(ctx context.Context, in *MsgMintCourseNft, opts ...grpc.CallOption) (*MsgMintCourseNftResponse, error) {
	out := new(MsgMintCourseNftResponse)
	err := c.cc.Invoke(ctx, "/academictoken.academicnft.Msg/MintCourseNft", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) TransferCourseNft(ctx context.Context, in *MsgTransferCourseNft, opts ...grpc.CallOption) (*MsgTransferCourseNftResponse, error) {
	out := new(MsgTransferCourseNftResponse)
	err := c.cc.Invoke(ctx, "/academictoken.academicnft.Msg/TransferCourseNft", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) ApproveEquivalence(ctx context.Context, in *MsgApproveEquivalence, opts ...grpc.CallOption) (*MsgApproveEquivalenceResponse, error) {
	out := new(MsgApproveEquivalenceResponse)
	err := c.cc.Invoke(ctx, "/academictoken.academicnft.Msg/ApproveEquivalence", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
type MsgServer interface {
	// UpdateParams defines a (governance) operation for updating the module
	// parameters. The authority defaults to the x/gov module account.
	UpdateParams(context.Context, *MsgUpdateParams) (*MsgUpdateParamsResponse, error)
	MintCourseNft(context.Context, *MsgMintCourseNft) (*MsgMintCourseNftResponse, error)
	TransferCourseNft(context.Context, *MsgTransferCourseNft) (*MsgTransferCourseNftResponse, error)
	ApproveEquivalence(context.Context, *MsgApproveEquivalence) (*MsgApproveEquivalenceResponse, error)
}

// UnimplementedMsgServer can be embedded to have forward compatible implementations.
type UnimplementedMsgServer struct {
}

func (*UnimplementedMsgServer) UpdateParams(ctx context.Context, req *MsgUpdateParams) (*MsgUpdateParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateParams not implemented")
}
func (*UnimplementedMsgServer) MintCourseNft(ctx context.Context, req *MsgMintCourseNft) (*MsgMintCourseNftResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MintCourseNft not implemented")
}
func (*UnimplementedMsgServer) TransferCourseNft(ctx context.Context, req *MsgTransferCourseNft) (*MsgTransferCourseNftResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TransferCourseNft not implemented")
}
func (*UnimplementedMsgServer) ApproveEquivalence(ctx context.Context, req *MsgApproveEquivalence) (*MsgApproveEquivalenceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ApproveEquivalence not implemented")
}

func RegisterMsgServer(s grpc1.Server, srv MsgServer) {
	s.RegisterService(&_Msg_serviceDesc, srv)
}

func _Msg_UpdateParams_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdateParams(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/academictoken.academicnft.Msg/UpdateParams",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdateParams(ctx, req.(*MsgUpdateParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_MintCourseNft_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgMintCourseNft)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).MintCourseNft(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/academictoken.academicnft.Msg/MintCourseNft",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).MintCourseNft(ctx, req.(*MsgMintCourseNft))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_TransferCourseNft_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgTransferCourseNft)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).TransferCourseNft(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/academictoken.academicnft.Msg/TransferCourseNft",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).TransferCourseNft(ctx, req.(*MsgTransferCourseNft))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_ApproveEquivalence_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgApproveEquivalence)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).ApproveEquivalence(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/academictoken.academicnft.Msg/ApproveEquivalence",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).ApproveEquivalence(ctx, req.(*MsgApproveEquivalence))
	}
	return interceptor(ctx, in, info, handler)
}

var Msg_serviceDesc = _Msg_serviceDesc
var _Msg_serviceDesc = grpc.ServiceDesc{
	ServiceName: "academictoken.academicnft.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UpdateParams",
			Handler:    _Msg_UpdateParams_Handler,
		},
		{
			MethodName: "MintCourseNft",
			Handler:    _Msg_MintCourseNft_Handler,
		},
		{
			MethodName: "TransferCourseNft",
			Handler:    _Msg_TransferCourseNft_Handler,
		},
		{
			MethodName: "ApproveEquivalence",
			Handler:    _Msg_ApproveEquivalence_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "academictoken/academicnft/tx.proto",
}

func (m *MsgUpdateParams) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateParams) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateParams) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.Authority) > 0 {
		i -= len(m.Authority)
		copy(dAtA[i:], m.Authority)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Authority)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgUpdateParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgMintCourseNft) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgMintCourseNft) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgMintCourseNft) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ContentHash) > 0 {
		i -= len(m.ContentHash)
		copy(dAtA[i:], m.ContentHash)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ContentHash)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x82
	}
	if len(m.Keywords) > 0 {
		for iNdEx := len(m.Keywords) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Keywords[iNdEx])
			copy(dAtA[i:], m.Keywords[iNdEx])
			i = encodeVarintTx(dAtA, i, uint64(len(m.Keywords[iNdEx])))
			i--
			dAtA[i] = 0x7a
		}
	}
	if len(m.BibliographyComplementary) > 0 {
		for iNdEx := len(m.BibliographyComplementary) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.BibliographyComplementary[iNdEx])
			copy(dAtA[i:], m.BibliographyComplementary[iNdEx])
			i = encodeVarintTx(dAtA, i, uint64(len(m.BibliographyComplementary[iNdEx])))
			i--
			dAtA[i] = 0x72
		}
	}
	if len(m.BibliographyBasic) > 0 {
		for iNdEx := len(m.BibliographyBasic) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.BibliographyBasic[iNdEx])
			copy(dAtA[i:], m.BibliographyBasic[iNdEx])
			i = encodeVarintTx(dAtA, i, uint64(len(m.BibliographyBasic[iNdEx])))
			i--
			dAtA[i] = 0x6a
		}
	}
	if len(m.EvaluationMethods) > 0 {
		for iNdEx := len(m.EvaluationMethods) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.EvaluationMethods[iNdEx])
			copy(dAtA[i:], m.EvaluationMethods[iNdEx])
			i = encodeVarintTx(dAtA, i, uint64(len(m.EvaluationMethods[iNdEx])))
			i--
			dAtA[i] = 0x62
		}
	}
	if len(m.Methodologies) > 0 {
		for iNdEx := len(m.Methodologies) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Methodologies[iNdEx])
			copy(dAtA[i:], m.Methodologies[iNdEx])
			i = encodeVarintTx(dAtA, i, uint64(len(m.Methodologies[iNdEx])))
			i--
			dAtA[i] = 0x5a
		}
	}
	if len(m.TopicUnits) > 0 {
		for iNdEx := len(m.TopicUnits) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.TopicUnits[iNdEx])
			copy(dAtA[i:], m.TopicUnits[iNdEx])
			i = encodeVarintTx(dAtA, i, uint64(len(m.TopicUnits[iNdEx])))
			i--
			dAtA[i] = 0x52
		}
	}
	if len(m.Objectives) > 0 {
		for iNdEx := len(m.Objectives) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Objectives[iNdEx])
			copy(dAtA[i:], m.Objectives[iNdEx])
			i = encodeVarintTx(dAtA, i, uint64(len(m.Objectives[iNdEx])))
			i--
			dAtA[i] = 0x4a
		}
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x42
	}
	if m.Credits != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.Credits))
		i--
		dAtA[i] = 0x38
	}
	if m.WorkloadHours != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.WorkloadHours))
		i--
		dAtA[i] = 0x30
	}
	if len(m.Code) > 0 {
		i -= len(m.Code)
		copy(dAtA[i:], m.Code)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Code)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Title) > 0 {
		i -= len(m.Title)
		copy(dAtA[i:], m.Title)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Title)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Institution) > 0 {
		i -= len(m.Institution)
		copy(dAtA[i:], m.Institution)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Institution)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.CourseId) > 0 {
		i -= len(m.CourseId)
		copy(dAtA[i:], m.CourseId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.CourseId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgMintCourseNftResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgMintCourseNftResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgMintCourseNftResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgTransferCourseNft) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgTransferCourseNft) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgTransferCourseNft) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Recipient) > 0 {
		i -= len(m.Recipient)
		copy(dAtA[i:], m.Recipient)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Recipient)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.NftId) > 0 {
		i -= len(m.NftId)
		copy(dAtA[i:], m.NftId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.NftId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgTransferCourseNftResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgTransferCourseNftResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgTransferCourseNftResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgApproveEquivalence) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgApproveEquivalence) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgApproveEquivalence) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Justification) > 0 {
		i -= len(m.Justification)
		copy(dAtA[i:], m.Justification)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Justification)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Score) > 0 {
		i -= len(m.Score)
		copy(dAtA[i:], m.Score)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Score)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.NftId2) > 0 {
		i -= len(m.NftId2)
		copy(dAtA[i:], m.NftId2)
		i = encodeVarintTx(dAtA, i, uint64(len(m.NftId2)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.NftId1) > 0 {
		i -= len(m.NftId1)
		copy(dAtA[i:], m.NftId1)
		i = encodeVarintTx(dAtA, i, uint64(len(m.NftId1)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgApproveEquivalenceResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgApproveEquivalenceResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgApproveEquivalenceResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintTx(dAtA []byte, offset int, v uint64) int {
	offset -= sovTx(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MsgUpdateParams) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Authority)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = m.Params.Size()
	n += 1 + l + sovTx(uint64(l))
	return n
}

func (m *MsgUpdateParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgMintCourseNft) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.CourseId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Institution)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Code)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.WorkloadHours != 0 {
		n += 1 + sovTx(uint64(m.WorkloadHours))
	}
	if m.Credits != 0 {
		n += 1 + sovTx(uint64(m.Credits))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if len(m.Objectives) > 0 {
		for _, s := range m.Objectives {
			l = len(s)
			n += 1 + l + sovTx(uint64(l))
		}
	}
	if len(m.TopicUnits) > 0 {
		for _, s := range m.TopicUnits {
			l = len(s)
			n += 1 + l + sovTx(uint64(l))
		}
	}
	if len(m.Methodologies) > 0 {
		for _, s := range m.Methodologies {
			l = len(s)
			n += 1 + l + sovTx(uint64(l))
		}
	}
	if len(m.EvaluationMethods) > 0 {
		for _, s := range m.EvaluationMethods {
			l = len(s)
			n += 1 + l + sovTx(uint64(l))
		}
	}
	if len(m.BibliographyBasic) > 0 {
		for _, s := range m.BibliographyBasic {
			l = len(s)
			n += 1 + l + sovTx(uint64(l))
		}
	}
	if len(m.BibliographyComplementary) > 0 {
		for _, s := range m.BibliographyComplementary {
			l = len(s)
			n += 1 + l + sovTx(uint64(l))
		}
	}
	if len(m.Keywords) > 0 {
		for _, s := range m.Keywords {
			l = len(s)
			n += 1 + l + sovTx(uint64(l))
		}
	}
	l = len(m.ContentHash)
	if l > 0 {
		n += 2 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgMintCourseNftResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgTransferCourseNft) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.NftId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Recipient)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgTransferCourseNftResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgApproveEquivalence) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.NftId1)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.NftId2)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Score)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Justification)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgApproveEquivalenceResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovTx(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTx(x uint64) (n int) {
	return sovTx(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MsgUpdateParams) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateParams: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateParams: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Authority", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Authority = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgMintCourseNft) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgMintCourseNft: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgMintCourseNft: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CourseId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CourseId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Institution", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Institution = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Code = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WorkloadHours", wireType)
			}
			m.WorkloadHours = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.WorkloadHours |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Credits", wireType)
			}
			m.Credits = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Credits |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Objectives", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Objectives = append(m.Objectives, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TopicUnits", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TopicUnits = append(m.TopicUnits, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Methodologies", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Methodologies = append(m.Methodologies, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EvaluationMethods", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EvaluationMethods = append(m.EvaluationMethods, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BibliographyBasic", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BibliographyBasic = append(m.BibliographyBasic, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BibliographyComplementary", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BibliographyComplementary = append(m.BibliographyComplementary, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Keywords", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Keywords = append(m.Keywords, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContentHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContentHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgMintCourseNftResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgMintCourseNftResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgMintCourseNftResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgTransferCourseNft) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgTransferCourseNft: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgTransferCourseNft: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NftId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NftId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Recipient", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Recipient = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgTransferCourseNftResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgTransferCourseNftResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgTransferCourseNftResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgApproveEquivalence) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgApproveEquivalence: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgApproveEquivalence: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NftId1", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NftId1 = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NftId2", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NftId2 = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Score", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Score = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Justification", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Justification = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgApproveEquivalenceResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgApproveEquivalenceResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgApproveEquivalenceResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTx(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTx
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTx
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTx
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTx
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTx        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTx          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTx = fmt.Errorf("proto: unexpected end of group")
)
