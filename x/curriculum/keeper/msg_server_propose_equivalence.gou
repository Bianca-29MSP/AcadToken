package keeper

import (
	"context"

	"github.com/Bianca-29MSP/AcademicToken/x/curriculum/types"
	sdk "github.com/cosmos/cosmos-sdk/types"
	sdkerrors "github.com/cosmos/cosmos-sdk/types/errors"
)

func (k msgServer) ProposeEquivalence(goCtx context.Context, msg *types.MsgProposeEquivalence) (*types.MsgProposeEquivalenceResponse, error) {
    ctx := sdk.UnwrapSDKContext(goCtx)

    // Verificar se o emissor é uma instituição autorizada
    institution, found := k.GetInstitution(ctx, msg.Creator)
    if !found || !institution.IsAuthorized {
        return nil, sdkerrors.Wrap(sdkerrors.ErrUnauthorized, "apenas instituições autorizadas podem propor equivalências")
    }

    // Verificar se o token de origem existe
    sourceToken, found := k.GetCourseToken(ctx, msg.SourceTokenID)
    if !found {
        return nil, sdkerrors.Wrap(sdkerrors.ErrNotFound, "token de origem não encontrado")
    }

    // Verificar se a instituição alvo existe
    targetInst, found := k.GetInstitution(ctx, msg.TargetInstitution)
    if !found {
        return nil, sdkerrors.Wrap(sdkerrors.ErrNotFound, "instituição alvo não encontrada")
    }

    // Verificar se já existe uma proposta de equivalência para esta combinação
    // Primeiro, criar uma chave única para esta equivalência
    equivalenceID := msg.SourceTokenID + "-" + msg.TargetInstitution + "-" + msg.TargetCourseCode
    
    _, found = k.GetCourseEquivalence(ctx, equivalenceID)
    if found {
        return nil, sdkerrors.Wrap(sdkerrors.ErrInvalidRequest, "equivalência já proposta")
    }

    // Criar nova proposta de equivalência
    equivalence := types.CourseEquivalence{
        SourceTokenID:     msg.SourceTokenID,
        TargetInstitution: msg.TargetInstitution,
        TargetCourseCode:  msg.TargetCourseCode,
        EquivalenceStatus: 1, // 1 = Proposto, 2 = Aprovado, 3 = Rejeitado
        ApprovalCount:     1, // A instituição que propõe automaticamente aprova
    }

    // Salvar a equivalência no estado
    k.SetCourseEquivalence(ctx, equivalence)

    // Emitir evento
    ctx.EventManager().EmitEvent(
        sdk.NewEvent(
            "equivalence_proposed",
            sdk.NewAttribute("source_token", msg.SourceTokenID),
            sdk.NewAttribute("target_institution", msg.TargetInstitution),
            sdk.NewAttribute("target_course", msg.TargetCourseCode),
            sdk.NewAttribute("proposer", msg.Creator),
        ),
    )

    return &types.MsgProposeEquivalenceResponse{}, nil
}
