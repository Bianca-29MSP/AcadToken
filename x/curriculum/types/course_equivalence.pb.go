// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: academictoken/curriculum/course_equivalence.proto

package types

import (
	fmt "fmt"
	io "io"
	math "math"
	math_bits "math/bits"

	proto "github.com/cosmos/gogoproto/proto"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type CourseEquivalence struct {
	SourceTokenId     string `protobuf:"bytes,1,opt,name=sourceTokenId,proto3" json:"sourceTokenId,omitempty"`
	TargetInstitution string `protobuf:"bytes,2,opt,name=targetInstitution,proto3" json:"targetInstitution,omitempty"`
	TargetCourseCode  string `protobuf:"bytes,3,opt,name=targetCourseCode,proto3" json:"targetCourseCode,omitempty"`
	EquivalenceStatus uint64 `protobuf:"varint,4,opt,name=equivalenceStatus,proto3" json:"equivalenceStatus,omitempty"`
	ApprovalCount     uint64 `protobuf:"varint,5,opt,name=approvalCount,proto3" json:"approvalCount,omitempty"`
}

func (m *CourseEquivalence) Reset()         { *m = CourseEquivalence{} }
func (m *CourseEquivalence) String() string { return proto.CompactTextString(m) }
func (*CourseEquivalence) ProtoMessage()    {}
func (*CourseEquivalence) Descriptor() ([]byte, []int) {
	return fileDescriptor_ab25e7a0f6ddd3d2, []int{0}
}
func (m *CourseEquivalence) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CourseEquivalence) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CourseEquivalence.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CourseEquivalence) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CourseEquivalence.Merge(m, src)
}
func (m *CourseEquivalence) XXX_Size() int {
	return m.Size()
}
func (m *CourseEquivalence) XXX_DiscardUnknown() {
	xxx_messageInfo_CourseEquivalence.DiscardUnknown(m)
}

var xxx_messageInfo_CourseEquivalence proto.InternalMessageInfo

func (m *CourseEquivalence) GetSourceTokenId() string {
	if m != nil {
		return m.SourceTokenId
	}
	return ""
}

func (m *CourseEquivalence) GetTargetInstitution() string {
	if m != nil {
		return m.TargetInstitution
	}
	return ""
}

func (m *CourseEquivalence) GetTargetCourseCode() string {
	if m != nil {
		return m.TargetCourseCode
	}
	return ""
}

func (m *CourseEquivalence) GetEquivalenceStatus() uint64 {
	if m != nil {
		return m.EquivalenceStatus
	}
	return 0
}

func (m *CourseEquivalence) GetApprovalCount() uint64 {
	if m != nil {
		return m.ApprovalCount
	}
	return 0
}

func init() {
	proto.RegisterType((*CourseEquivalence)(nil), "academictoken.curriculum.CourseEquivalence")
}

func init() {
	proto.RegisterFile("academictoken/curriculum/course_equivalence.proto", fileDescriptor_ab25e7a0f6ddd3d2)
}

var fileDescriptor_ab25e7a0f6ddd3d2 = []byte{
	// 275 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x64, 0x90, 0xb1, 0x4e, 0xc3, 0x30,
	0x10, 0x86, 0x63, 0x28, 0x48, 0x44, 0x42, 0xa2, 0x99, 0x3c, 0x59, 0x15, 0x62, 0xa8, 0x10, 0x24,
	0x02, 0x16, 0x18, 0x69, 0xc4, 0xd0, 0x01, 0x09, 0xa5, 0x4c, 0x2c, 0xc8, 0x75, 0xac, 0x62, 0x91,
	0xd8, 0xc1, 0xbe, 0xab, 0xe0, 0x2d, 0x78, 0x2c, 0xc6, 0x8e, 0x8c, 0x28, 0x19, 0x78, 0x0d, 0x14,
	0x17, 0xa9, 0x8d, 0xb2, 0xfe, 0xf7, 0x7d, 0xf6, 0xdd, 0x1f, 0x5e, 0x70, 0xc1, 0x73, 0x59, 0x2a,
	0x01, 0xe6, 0x55, 0xea, 0x44, 0xa0, 0xb5, 0x4a, 0x60, 0x81, 0x65, 0x22, 0x0c, 0x5a, 0x27, 0x9f,
	0xe5, 0x1b, 0xaa, 0x25, 0x2f, 0xa4, 0x16, 0x32, 0xae, 0xac, 0x01, 0x13, 0xd1, 0x8e, 0x12, 0x6f,
	0x94, 0xe3, 0x5f, 0x12, 0x0e, 0x53, 0xaf, 0xdd, 0x6d, 0xac, 0xe8, 0x24, 0x3c, 0x74, 0x06, 0xad,
	0x90, 0x8f, 0x2d, 0x3f, 0xcd, 0x29, 0x19, 0x91, 0xf1, 0x41, 0xd6, 0x0d, 0xa3, 0xb3, 0x70, 0x08,
	0xdc, 0x2e, 0x24, 0x4c, 0xb5, 0x03, 0x05, 0x08, 0xca, 0x68, 0xba, 0xe3, 0xc9, 0xfe, 0x20, 0x3a,
	0x0d, 0x8f, 0xd6, 0xe1, 0xfa, 0xbb, 0xd4, 0xe4, 0x92, 0xee, 0x7a, 0xb8, 0x97, 0xb7, 0x2f, 0x6f,
	0x1d, 0x31, 0x03, 0x0e, 0xe8, 0xe8, 0x60, 0x44, 0xc6, 0x83, 0xac, 0x3f, 0x68, 0xb7, 0xe5, 0x55,
	0x65, 0xcd, 0x92, 0x17, 0xa9, 0x41, 0x0d, 0x74, 0xcf, 0x93, 0xdd, 0x70, 0x92, 0x7d, 0xd5, 0x8c,
	0xac, 0x6a, 0x46, 0x7e, 0x6a, 0x46, 0x3e, 0x1b, 0x16, 0xac, 0x1a, 0x16, 0x7c, 0x37, 0x2c, 0x78,
	0xba, 0x5e, 0x28, 0x78, 0xc1, 0x79, 0x2c, 0x4c, 0x99, 0x4c, 0x14, 0xd7, 0x82, 0x9f, 0x5f, 0xde,
	0xdc, 0xcf, 0x1e, 0x92, 0xdb, 0xff, 0xd6, 0xfc, 0xc1, 0xc9, 0xfb, 0x76, 0xd5, 0xf0, 0x51, 0x49,
	0x37, 0xdf, 0xf7, 0xf5, 0x5e, 0xfd, 0x05, 0x00, 0x00, 0xff, 0xff, 0xc7, 0x50, 0x01, 0x11, 0x93,
	0x01, 0x00, 0x00,
}

func (m *CourseEquivalence) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CourseEquivalence) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CourseEquivalence) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ApprovalCount != 0 {
		i = encodeVarintCourseEquivalence(dAtA, i, uint64(m.ApprovalCount))
		i--
		dAtA[i] = 0x28
	}
	if m.EquivalenceStatus != 0 {
		i = encodeVarintCourseEquivalence(dAtA, i, uint64(m.EquivalenceStatus))
		i--
		dAtA[i] = 0x20
	}
	if len(m.TargetCourseCode) > 0 {
		i -= len(m.TargetCourseCode)
		copy(dAtA[i:], m.TargetCourseCode)
		i = encodeVarintCourseEquivalence(dAtA, i, uint64(len(m.TargetCourseCode)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.TargetInstitution) > 0 {
		i -= len(m.TargetInstitution)
		copy(dAtA[i:], m.TargetInstitution)
		i = encodeVarintCourseEquivalence(dAtA, i, uint64(len(m.TargetInstitution)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.SourceTokenId) > 0 {
		i -= len(m.SourceTokenId)
		copy(dAtA[i:], m.SourceTokenId)
		i = encodeVarintCourseEquivalence(dAtA, i, uint64(len(m.SourceTokenId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintCourseEquivalence(dAtA []byte, offset int, v uint64) int {
	offset -= sovCourseEquivalence(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *CourseEquivalence) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.SourceTokenId)
	if l > 0 {
		n += 1 + l + sovCourseEquivalence(uint64(l))
	}
	l = len(m.TargetInstitution)
	if l > 0 {
		n += 1 + l + sovCourseEquivalence(uint64(l))
	}
	l = len(m.TargetCourseCode)
	if l > 0 {
		n += 1 + l + sovCourseEquivalence(uint64(l))
	}
	if m.EquivalenceStatus != 0 {
		n += 1 + sovCourseEquivalence(uint64(m.EquivalenceStatus))
	}
	if m.ApprovalCount != 0 {
		n += 1 + sovCourseEquivalence(uint64(m.ApprovalCount))
	}
	return n
}

func sovCourseEquivalence(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozCourseEquivalence(x uint64) (n int) {
	return sovCourseEquivalence(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *CourseEquivalence) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCourseEquivalence
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CourseEquivalence: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CourseEquivalence: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SourceTokenId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCourseEquivalence
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCourseEquivalence
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCourseEquivalence
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SourceTokenId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TargetInstitution", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCourseEquivalence
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCourseEquivalence
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCourseEquivalence
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TargetInstitution = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TargetCourseCode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCourseEquivalence
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCourseEquivalence
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCourseEquivalence
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TargetCourseCode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EquivalenceStatus", wireType)
			}
			m.EquivalenceStatus = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCourseEquivalence
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EquivalenceStatus |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApprovalCount", wireType)
			}
			m.ApprovalCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCourseEquivalence
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ApprovalCount |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCourseEquivalence(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCourseEquivalence
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipCourseEquivalence(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowCourseEquivalence
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCourseEquivalence
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCourseEquivalence
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthCourseEquivalence
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupCourseEquivalence
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthCourseEquivalence
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthCourseEquivalence        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowCourseEquivalence          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupCourseEquivalence = fmt.Errorf("proto: unexpected end of group")
)
