// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: academictoken/curriculum/course_content.proto

package types

import (
	fmt "fmt"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type CourseContent struct {
	Index                     string   `protobuf:"bytes,1,opt,name=index,proto3" json:"index,omitempty"`
	CourseId                  string   `protobuf:"bytes,2,opt,name=courseId,proto3" json:"courseId,omitempty"`
	Institution               string   `protobuf:"bytes,3,opt,name=institution,proto3" json:"institution,omitempty"`
	Title                     string   `protobuf:"bytes,4,opt,name=title,proto3" json:"title,omitempty"`
	Code                      string   `protobuf:"bytes,5,opt,name=code,proto3" json:"code,omitempty"`
	WorkloadHours             uint64   `protobuf:"varint,6,opt,name=workloadHours,proto3" json:"workloadHours,omitempty"`
	Credits                   uint64   `protobuf:"varint,7,opt,name=credits,proto3" json:"credits,omitempty"`
	Description               string   `protobuf:"bytes,8,opt,name=description,proto3" json:"description,omitempty"`
	Objectives                []string `protobuf:"bytes,9,rep,name=objectives,proto3" json:"objectives,omitempty"`
	TopicUnits                []string `protobuf:"bytes,10,rep,name=topicUnits,proto3" json:"topicUnits,omitempty"`
	Methodologies             []string `protobuf:"bytes,11,rep,name=methodologies,proto3" json:"methodologies,omitempty"`
	EvaluationMethods         []string `protobuf:"bytes,12,rep,name=evaluationMethods,proto3" json:"evaluationMethods,omitempty"`
	BibliographyBasic         []string `protobuf:"bytes,13,rep,name=bibliographyBasic,proto3" json:"bibliographyBasic,omitempty"`
	BibliographyComplementary []string `protobuf:"bytes,14,rep,name=bibliographyComplementary,proto3" json:"bibliographyComplementary,omitempty"`
	Keywords                  []string `protobuf:"bytes,15,rep,name=keywords,proto3" json:"keywords,omitempty"`
	ContentHash               string   `protobuf:"bytes,16,opt,name=contentHash,proto3" json:"contentHash,omitempty"`
}

func (m *CourseContent) Reset()         { *m = CourseContent{} }
func (m *CourseContent) String() string { return proto.CompactTextString(m) }
func (*CourseContent) ProtoMessage()    {}
func (*CourseContent) Descriptor() ([]byte, []int) {
	return fileDescriptor_9d05df99f8170b53, []int{0}
}
func (m *CourseContent) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CourseContent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CourseContent.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CourseContent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CourseContent.Merge(m, src)
}
func (m *CourseContent) XXX_Size() int {
	return m.Size()
}
func (m *CourseContent) XXX_DiscardUnknown() {
	xxx_messageInfo_CourseContent.DiscardUnknown(m)
}

var xxx_messageInfo_CourseContent proto.InternalMessageInfo

func (m *CourseContent) GetIndex() string {
	if m != nil {
		return m.Index
	}
	return ""
}

func (m *CourseContent) GetCourseId() string {
	if m != nil {
		return m.CourseId
	}
	return ""
}

func (m *CourseContent) GetInstitution() string {
	if m != nil {
		return m.Institution
	}
	return ""
}

func (m *CourseContent) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *CourseContent) GetCode() string {
	if m != nil {
		return m.Code
	}
	return ""
}

func (m *CourseContent) GetWorkloadHours() uint64 {
	if m != nil {
		return m.WorkloadHours
	}
	return 0
}

func (m *CourseContent) GetCredits() uint64 {
	if m != nil {
		return m.Credits
	}
	return 0
}

func (m *CourseContent) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *CourseContent) GetObjectives() []string {
	if m != nil {
		return m.Objectives
	}
	return nil
}

func (m *CourseContent) GetTopicUnits() []string {
	if m != nil {
		return m.TopicUnits
	}
	return nil
}

func (m *CourseContent) GetMethodologies() []string {
	if m != nil {
		return m.Methodologies
	}
	return nil
}

func (m *CourseContent) GetEvaluationMethods() []string {
	if m != nil {
		return m.EvaluationMethods
	}
	return nil
}

func (m *CourseContent) GetBibliographyBasic() []string {
	if m != nil {
		return m.BibliographyBasic
	}
	return nil
}

func (m *CourseContent) GetBibliographyComplementary() []string {
	if m != nil {
		return m.BibliographyComplementary
	}
	return nil
}

func (m *CourseContent) GetKeywords() []string {
	if m != nil {
		return m.Keywords
	}
	return nil
}

func (m *CourseContent) GetContentHash() string {
	if m != nil {
		return m.ContentHash
	}
	return ""
}

func init() {
	proto.RegisterType((*CourseContent)(nil), "academictoken.curriculum.CourseContent")
}

func init() {
	proto.RegisterFile("academictoken/curriculum/course_content.proto", fileDescriptor_9d05df99f8170b53)
}

var fileDescriptor_9d05df99f8170b53 = []byte{
	// 429 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x52, 0xbd, 0x6e, 0x13, 0x41,
	0x10, 0xf6, 0x11, 0xe7, 0xc7, 0x1b, 0xcc, 0xcf, 0x8a, 0x62, 0xa1, 0x38, 0x59, 0x88, 0xc2, 0x05,
	0xb1, 0x25, 0x68, 0x40, 0xa2, 0xc1, 0x6e, 0x42, 0x11, 0x09, 0x19, 0x68, 0x68, 0xd0, 0xde, 0xee,
	0xc8, 0x1e, 0x7c, 0xb7, 0x73, 0xda, 0xdd, 0x4b, 0x72, 0x6f, 0xc1, 0x8b, 0xf0, 0x1e, 0x94, 0x29,
	0x29, 0x91, 0xfd, 0x22, 0x68, 0x77, 0x43, 0x72, 0x56, 0x44, 0x77, 0xdf, 0xcf, 0x7c, 0x37, 0x9a,
	0xfd, 0xd8, 0x89, 0x54, 0x52, 0x43, 0x85, 0xca, 0xd3, 0x1a, 0xcc, 0x54, 0x35, 0xd6, 0xa2, 0x6a,
	0xca, 0xa6, 0x9a, 0x2a, 0x6a, 0xac, 0x83, 0x6f, 0x8a, 0x8c, 0x07, 0xe3, 0x27, 0xb5, 0x25, 0x4f,
	0x5c, 0xec, 0xd8, 0x27, 0xb7, 0xf6, 0xe7, 0x3f, 0xfb, 0x6c, 0x38, 0x8f, 0x23, 0xf3, 0x34, 0xc1,
	0x9f, 0xb0, 0x7d, 0x34, 0x1a, 0x2e, 0x45, 0x36, 0xca, 0xc6, 0x83, 0x45, 0x02, 0xfc, 0x19, 0x3b,
	0x4a, 0xc9, 0x1f, 0xb4, 0xb8, 0x17, 0x85, 0x1b, 0xcc, 0x47, 0xec, 0x18, 0x8d, 0xf3, 0xe8, 0x1b,
	0x8f, 0x64, 0xc4, 0x5e, 0x94, 0xbb, 0x54, 0xc8, 0xf4, 0xe8, 0x4b, 0x10, 0xfd, 0x94, 0x19, 0x01,
	0xe7, 0xac, 0xaf, 0x48, 0x83, 0xd8, 0x8f, 0x64, 0xfc, 0xe6, 0x2f, 0xd8, 0xf0, 0x82, 0xec, 0xba,
	0x24, 0xa9, 0x4f, 0x43, 0xbe, 0x38, 0x18, 0x65, 0xe3, 0xfe, 0x62, 0x97, 0xe4, 0x82, 0x1d, 0x2a,
	0x0b, 0x1a, 0xbd, 0x13, 0x87, 0x51, 0xff, 0x07, 0xc3, 0x2e, 0x1a, 0x9c, 0xb2, 0x58, 0xc7, 0x5d,
	0x8e, 0xd2, 0x2e, 0x1d, 0x8a, 0xe7, 0x8c, 0x51, 0xf1, 0x1d, 0x94, 0xc7, 0x73, 0x70, 0x62, 0x30,
	0xda, 0x1b, 0x0f, 0x16, 0x1d, 0x26, 0xe8, 0x9e, 0x6a, 0x54, 0x5f, 0x4c, 0x88, 0x67, 0x49, 0xbf,
	0x65, 0xc2, 0x86, 0x15, 0xf8, 0x15, 0x69, 0x2a, 0x69, 0x89, 0xe0, 0xc4, 0x71, 0xb4, 0xec, 0x92,
	0xfc, 0x25, 0x7b, 0x0c, 0xe7, 0xb2, 0x6c, 0x64, 0xf8, 0xe7, 0x59, 0x94, 0x9c, 0xb8, 0x1f, 0x9d,
	0x77, 0x85, 0xe0, 0x2e, 0xb0, 0x28, 0x91, 0x96, 0x56, 0xd6, 0xab, 0x76, 0x26, 0x1d, 0x2a, 0x31,
	0x4c, 0xee, 0x3b, 0x02, 0x7f, 0xc7, 0x9e, 0x76, 0xc9, 0x39, 0x55, 0x75, 0x09, 0x15, 0x18, 0x2f,
	0x6d, 0x2b, 0x1e, 0xc4, 0xa9, 0xff, 0x1b, 0xc2, 0x4b, 0xae, 0xa1, 0xbd, 0x20, 0xab, 0x9d, 0x78,
	0x18, 0xcd, 0x37, 0x38, 0x5c, 0xef, 0xba, 0x38, 0xa7, 0xd2, 0xad, 0xc4, 0xa3, 0x74, 0xbd, 0x0e,
	0x35, 0x5b, 0xfc, 0xda, 0xe4, 0xd9, 0xd5, 0x26, 0xcf, 0xfe, 0x6c, 0xf2, 0xec, 0xc7, 0x36, 0xef,
	0x5d, 0x6d, 0xf3, 0xde, 0xef, 0x6d, 0xde, 0xfb, 0xfa, 0x66, 0x89, 0x7e, 0xd5, 0x14, 0x13, 0x45,
	0xd5, 0x74, 0x86, 0xd2, 0x28, 0x79, 0xf2, 0xea, 0xed, 0xd9, 0xa7, 0x8f, 0xd3, 0xf7, 0xd7, 0xdd,
	0xfb, 0x1c, 0xab, 0x7a, 0xd9, 0x2d, 0xab, 0x6f, 0x6b, 0x70, 0xc5, 0x41, 0x2c, 0xe9, 0xeb, 0xbf,
	0x01, 0x00, 0x00, 0xff, 0xff, 0x8f, 0x61, 0x8e, 0xea, 0xd5, 0x02, 0x00, 0x00,
}

func (m *CourseContent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CourseContent) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CourseContent) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ContentHash) > 0 {
		i -= len(m.ContentHash)
		copy(dAtA[i:], m.ContentHash)
		i = encodeVarintCourseContent(dAtA, i, uint64(len(m.ContentHash)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x82
	}
	if len(m.Keywords) > 0 {
		for iNdEx := len(m.Keywords) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Keywords[iNdEx])
			copy(dAtA[i:], m.Keywords[iNdEx])
			i = encodeVarintCourseContent(dAtA, i, uint64(len(m.Keywords[iNdEx])))
			i--
			dAtA[i] = 0x7a
		}
	}
	if len(m.BibliographyComplementary) > 0 {
		for iNdEx := len(m.BibliographyComplementary) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.BibliographyComplementary[iNdEx])
			copy(dAtA[i:], m.BibliographyComplementary[iNdEx])
			i = encodeVarintCourseContent(dAtA, i, uint64(len(m.BibliographyComplementary[iNdEx])))
			i--
			dAtA[i] = 0x72
		}
	}
	if len(m.BibliographyBasic) > 0 {
		for iNdEx := len(m.BibliographyBasic) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.BibliographyBasic[iNdEx])
			copy(dAtA[i:], m.BibliographyBasic[iNdEx])
			i = encodeVarintCourseContent(dAtA, i, uint64(len(m.BibliographyBasic[iNdEx])))
			i--
			dAtA[i] = 0x6a
		}
	}
	if len(m.EvaluationMethods) > 0 {
		for iNdEx := len(m.EvaluationMethods) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.EvaluationMethods[iNdEx])
			copy(dAtA[i:], m.EvaluationMethods[iNdEx])
			i = encodeVarintCourseContent(dAtA, i, uint64(len(m.EvaluationMethods[iNdEx])))
			i--
			dAtA[i] = 0x62
		}
	}
	if len(m.Methodologies) > 0 {
		for iNdEx := len(m.Methodologies) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Methodologies[iNdEx])
			copy(dAtA[i:], m.Methodologies[iNdEx])
			i = encodeVarintCourseContent(dAtA, i, uint64(len(m.Methodologies[iNdEx])))
			i--
			dAtA[i] = 0x5a
		}
	}
	if len(m.TopicUnits) > 0 {
		for iNdEx := len(m.TopicUnits) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.TopicUnits[iNdEx])
			copy(dAtA[i:], m.TopicUnits[iNdEx])
			i = encodeVarintCourseContent(dAtA, i, uint64(len(m.TopicUnits[iNdEx])))
			i--
			dAtA[i] = 0x52
		}
	}
	if len(m.Objectives) > 0 {
		for iNdEx := len(m.Objectives) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Objectives[iNdEx])
			copy(dAtA[i:], m.Objectives[iNdEx])
			i = encodeVarintCourseContent(dAtA, i, uint64(len(m.Objectives[iNdEx])))
			i--
			dAtA[i] = 0x4a
		}
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintCourseContent(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x42
	}
	if m.Credits != 0 {
		i = encodeVarintCourseContent(dAtA, i, uint64(m.Credits))
		i--
		dAtA[i] = 0x38
	}
	if m.WorkloadHours != 0 {
		i = encodeVarintCourseContent(dAtA, i, uint64(m.WorkloadHours))
		i--
		dAtA[i] = 0x30
	}
	if len(m.Code) > 0 {
		i -= len(m.Code)
		copy(dAtA[i:], m.Code)
		i = encodeVarintCourseContent(dAtA, i, uint64(len(m.Code)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Title) > 0 {
		i -= len(m.Title)
		copy(dAtA[i:], m.Title)
		i = encodeVarintCourseContent(dAtA, i, uint64(len(m.Title)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Institution) > 0 {
		i -= len(m.Institution)
		copy(dAtA[i:], m.Institution)
		i = encodeVarintCourseContent(dAtA, i, uint64(len(m.Institution)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.CourseId) > 0 {
		i -= len(m.CourseId)
		copy(dAtA[i:], m.CourseId)
		i = encodeVarintCourseContent(dAtA, i, uint64(len(m.CourseId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Index) > 0 {
		i -= len(m.Index)
		copy(dAtA[i:], m.Index)
		i = encodeVarintCourseContent(dAtA, i, uint64(len(m.Index)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintCourseContent(dAtA []byte, offset int, v uint64) int {
	offset -= sovCourseContent(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *CourseContent) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Index)
	if l > 0 {
		n += 1 + l + sovCourseContent(uint64(l))
	}
	l = len(m.CourseId)
	if l > 0 {
		n += 1 + l + sovCourseContent(uint64(l))
	}
	l = len(m.Institution)
	if l > 0 {
		n += 1 + l + sovCourseContent(uint64(l))
	}
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovCourseContent(uint64(l))
	}
	l = len(m.Code)
	if l > 0 {
		n += 1 + l + sovCourseContent(uint64(l))
	}
	if m.WorkloadHours != 0 {
		n += 1 + sovCourseContent(uint64(m.WorkloadHours))
	}
	if m.Credits != 0 {
		n += 1 + sovCourseContent(uint64(m.Credits))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovCourseContent(uint64(l))
	}
	if len(m.Objectives) > 0 {
		for _, s := range m.Objectives {
			l = len(s)
			n += 1 + l + sovCourseContent(uint64(l))
		}
	}
	if len(m.TopicUnits) > 0 {
		for _, s := range m.TopicUnits {
			l = len(s)
			n += 1 + l + sovCourseContent(uint64(l))
		}
	}
	if len(m.Methodologies) > 0 {
		for _, s := range m.Methodologies {
			l = len(s)
			n += 1 + l + sovCourseContent(uint64(l))
		}
	}
	if len(m.EvaluationMethods) > 0 {
		for _, s := range m.EvaluationMethods {
			l = len(s)
			n += 1 + l + sovCourseContent(uint64(l))
		}
	}
	if len(m.BibliographyBasic) > 0 {
		for _, s := range m.BibliographyBasic {
			l = len(s)
			n += 1 + l + sovCourseContent(uint64(l))
		}
	}
	if len(m.BibliographyComplementary) > 0 {
		for _, s := range m.BibliographyComplementary {
			l = len(s)
			n += 1 + l + sovCourseContent(uint64(l))
		}
	}
	if len(m.Keywords) > 0 {
		for _, s := range m.Keywords {
			l = len(s)
			n += 1 + l + sovCourseContent(uint64(l))
		}
	}
	l = len(m.ContentHash)
	if l > 0 {
		n += 2 + l + sovCourseContent(uint64(l))
	}
	return n
}

func sovCourseContent(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozCourseContent(x uint64) (n int) {
	return sovCourseContent(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *CourseContent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCourseContent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CourseContent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CourseContent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCourseContent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCourseContent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCourseContent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Index = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CourseId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCourseContent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCourseContent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCourseContent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CourseId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Institution", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCourseContent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCourseContent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCourseContent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Institution = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCourseContent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCourseContent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCourseContent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCourseContent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCourseContent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCourseContent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Code = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WorkloadHours", wireType)
			}
			m.WorkloadHours = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCourseContent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.WorkloadHours |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Credits", wireType)
			}
			m.Credits = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCourseContent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Credits |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCourseContent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCourseContent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCourseContent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Objectives", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCourseContent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCourseContent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCourseContent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Objectives = append(m.Objectives, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TopicUnits", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCourseContent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCourseContent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCourseContent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TopicUnits = append(m.TopicUnits, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Methodologies", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCourseContent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCourseContent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCourseContent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Methodologies = append(m.Methodologies, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EvaluationMethods", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCourseContent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCourseContent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCourseContent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EvaluationMethods = append(m.EvaluationMethods, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BibliographyBasic", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCourseContent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCourseContent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCourseContent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BibliographyBasic = append(m.BibliographyBasic, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BibliographyComplementary", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCourseContent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCourseContent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCourseContent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BibliographyComplementary = append(m.BibliographyComplementary, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Keywords", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCourseContent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCourseContent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCourseContent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Keywords = append(m.Keywords, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContentHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCourseContent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCourseContent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCourseContent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContentHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCourseContent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCourseContent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipCourseContent(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowCourseContent
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCourseContent
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCourseContent
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthCourseContent
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupCourseContent
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthCourseContent
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthCourseContent        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowCourseContent          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupCourseContent = fmt.Errorf("proto: unexpected end of group")
)
