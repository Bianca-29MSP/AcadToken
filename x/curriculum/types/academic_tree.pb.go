// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: academictoken/curriculum/academic_tree.proto

package types

import (
	fmt "fmt"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type AcademicTree struct {
	Student         string   `protobuf:"bytes,1,opt,name=student,proto3" json:"student,omitempty"`
	Institution     string   `protobuf:"bytes,2,opt,name=institution,proto3" json:"institution,omitempty"`
	CompletedTokens []string `protobuf:"bytes,3,rep,name=completedTokens,proto3" json:"completedTokens,omitempty"`
	AvailableTokens []string `protobuf:"bytes,4,rep,name=availableTokens,proto3" json:"availableTokens,omitempty"`
}

func (m *AcademicTree) Reset()         { *m = AcademicTree{} }
func (m *AcademicTree) String() string { return proto.CompactTextString(m) }
func (*AcademicTree) ProtoMessage()    {}
func (*AcademicTree) Descriptor() ([]byte, []int) {
	return fileDescriptor_63c2f94f27dd0308, []int{0}
}
func (m *AcademicTree) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AcademicTree) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AcademicTree.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AcademicTree) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AcademicTree.Merge(m, src)
}
func (m *AcademicTree) XXX_Size() int {
	return m.Size()
}
func (m *AcademicTree) XXX_DiscardUnknown() {
	xxx_messageInfo_AcademicTree.DiscardUnknown(m)
}

var xxx_messageInfo_AcademicTree proto.InternalMessageInfo

func (m *AcademicTree) GetStudent() string {
	if m != nil {
		return m.Student
	}
	return ""
}

func (m *AcademicTree) GetInstitution() string {
	if m != nil {
		return m.Institution
	}
	return ""
}

func (m *AcademicTree) GetCompletedTokens() []string {
	if m != nil {
		return m.CompletedTokens
	}
	return nil
}

func (m *AcademicTree) GetAvailableTokens() []string {
	if m != nil {
		return m.AvailableTokens
	}
	return nil
}

func init() {
	proto.RegisterType((*AcademicTree)(nil), "academictoken.curriculum.AcademicTree")
}

func init() {
	proto.RegisterFile("academictoken/curriculum/academic_tree.proto", fileDescriptor_63c2f94f27dd0308)
}

var fileDescriptor_63c2f94f27dd0308 = []byte{
	// 240 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xd2, 0x49, 0x4c, 0x4e, 0x4c,
	0x49, 0xcd, 0xcd, 0x4c, 0x2e, 0xc9, 0xcf, 0x4e, 0xcd, 0xd3, 0x4f, 0x2e, 0x2d, 0x2a, 0xca, 0x4c,
	0x2e, 0xcd, 0x29, 0xcd, 0xd5, 0x87, 0x49, 0xc4, 0x97, 0x14, 0xa5, 0xa6, 0xea, 0x15, 0x14, 0xe5,
	0x97, 0xe4, 0x0b, 0x49, 0xa0, 0xa8, 0xd6, 0x43, 0xa8, 0x56, 0x9a, 0xc7, 0xc8, 0xc5, 0xe3, 0x08,
	0x95, 0x0c, 0x29, 0x4a, 0x4d, 0x15, 0x92, 0xe0, 0x62, 0x2f, 0x2e, 0x29, 0x4d, 0x49, 0xcd, 0x2b,
	0x91, 0x60, 0x54, 0x60, 0xd4, 0xe0, 0x0c, 0x82, 0x71, 0x85, 0x14, 0xb8, 0xb8, 0x33, 0xf3, 0x8a,
	0x4b, 0x32, 0x4b, 0x4a, 0x4b, 0x32, 0xf3, 0xf3, 0x24, 0x98, 0xc0, 0xb2, 0xc8, 0x42, 0x42, 0x1a,
	0x5c, 0xfc, 0xc9, 0xf9, 0xb9, 0x05, 0x39, 0xa9, 0x25, 0xa9, 0x29, 0x21, 0x20, 0x9b, 0x8a, 0x25,
	0x98, 0x15, 0x98, 0x35, 0x38, 0x83, 0xd0, 0x85, 0x41, 0x2a, 0x13, 0xcb, 0x12, 0x33, 0x73, 0x12,
	0x93, 0x72, 0x52, 0xa1, 0x2a, 0x59, 0x20, 0x2a, 0xd1, 0x84, 0x9d, 0x82, 0x4e, 0x3c, 0x92, 0x63,
	0xbc, 0xf0, 0x48, 0x8e, 0xf1, 0xc1, 0x23, 0x39, 0xc6, 0x09, 0x8f, 0xe5, 0x18, 0x2e, 0x3c, 0x96,
	0x63, 0xb8, 0xf1, 0x58, 0x8e, 0x21, 0xca, 0x22, 0x3d, 0xb3, 0x24, 0xa3, 0x34, 0x49, 0x2f, 0x39,
	0x3f, 0x57, 0xdf, 0x29, 0x33, 0x31, 0x2f, 0x39, 0x51, 0xd7, 0xc8, 0xd2, 0x37, 0x38, 0x40, 0x1f,
	0xee, 0x1f, 0x70, 0xd0, 0x54, 0x20, 0x07, 0x4e, 0x49, 0x65, 0x41, 0x6a, 0x71, 0x12, 0x1b, 0x38,
	0x54, 0x8c, 0x01, 0x01, 0x00, 0x00, 0xff, 0xff, 0x7d, 0x4c, 0x2c, 0x49, 0x45, 0x01, 0x00, 0x00,
}

func (m *AcademicTree) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AcademicTree) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AcademicTree) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.AvailableTokens) > 0 {
		for iNdEx := len(m.AvailableTokens) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.AvailableTokens[iNdEx])
			copy(dAtA[i:], m.AvailableTokens[iNdEx])
			i = encodeVarintAcademicTree(dAtA, i, uint64(len(m.AvailableTokens[iNdEx])))
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.CompletedTokens) > 0 {
		for iNdEx := len(m.CompletedTokens) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.CompletedTokens[iNdEx])
			copy(dAtA[i:], m.CompletedTokens[iNdEx])
			i = encodeVarintAcademicTree(dAtA, i, uint64(len(m.CompletedTokens[iNdEx])))
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Institution) > 0 {
		i -= len(m.Institution)
		copy(dAtA[i:], m.Institution)
		i = encodeVarintAcademicTree(dAtA, i, uint64(len(m.Institution)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Student) > 0 {
		i -= len(m.Student)
		copy(dAtA[i:], m.Student)
		i = encodeVarintAcademicTree(dAtA, i, uint64(len(m.Student)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintAcademicTree(dAtA []byte, offset int, v uint64) int {
	offset -= sovAcademicTree(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *AcademicTree) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Student)
	if l > 0 {
		n += 1 + l + sovAcademicTree(uint64(l))
	}
	l = len(m.Institution)
	if l > 0 {
		n += 1 + l + sovAcademicTree(uint64(l))
	}
	if len(m.CompletedTokens) > 0 {
		for _, s := range m.CompletedTokens {
			l = len(s)
			n += 1 + l + sovAcademicTree(uint64(l))
		}
	}
	if len(m.AvailableTokens) > 0 {
		for _, s := range m.AvailableTokens {
			l = len(s)
			n += 1 + l + sovAcademicTree(uint64(l))
		}
	}
	return n
}

func sovAcademicTree(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozAcademicTree(x uint64) (n int) {
	return sovAcademicTree(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *AcademicTree) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAcademicTree
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AcademicTree: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AcademicTree: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Student", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAcademicTree
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAcademicTree
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAcademicTree
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Student = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Institution", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAcademicTree
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAcademicTree
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAcademicTree
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Institution = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CompletedTokens", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAcademicTree
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAcademicTree
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAcademicTree
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CompletedTokens = append(m.CompletedTokens, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AvailableTokens", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAcademicTree
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAcademicTree
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAcademicTree
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AvailableTokens = append(m.AvailableTokens, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAcademicTree(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAcademicTree
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipAcademicTree(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowAcademicTree
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAcademicTree
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAcademicTree
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthAcademicTree
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupAcademicTree
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthAcademicTree
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthAcademicTree        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowAcademicTree          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupAcademicTree = fmt.Errorf("proto: unexpected end of group")
)
