// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: academictoken/curriculum/institution.proto

package types

import (
	fmt "fmt"
	io "io"
	math "math"
	math_bits "math/bits"

	proto "github.com/cosmos/gogoproto/proto"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Institution struct {
	Address      string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	Name         string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	IsAuthorized bool   `protobuf:"varint,3,opt,name=isAuthorized,proto3" json:"isAuthorized,omitempty"`
}

func (m *Institution) Reset()         { *m = Institution{} }
func (m *Institution) String() string { return proto.CompactTextString(m) }
func (*Institution) ProtoMessage()    {}
func (*Institution) Descriptor() ([]byte, []int) {
	return fileDescriptor_8425bbd9ebc11bcb, []int{0}
}
func (m *Institution) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Institution) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Institution.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Institution) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Institution.Merge(m, src)
}
func (m *Institution) XXX_Size() int {
	return m.Size()
}
func (m *Institution) XXX_DiscardUnknown() {
	xxx_messageInfo_Institution.DiscardUnknown(m)
}

var xxx_messageInfo_Institution proto.InternalMessageInfo

func (m *Institution) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *Institution) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Institution) GetIsAuthorized() bool {
	if m != nil {
		return m.IsAuthorized
	}
	return false
}

func init() {
	proto.RegisterType((*Institution)(nil), "academictoken.curriculum.Institution")
}

func init() {
	proto.RegisterFile("academictoken/curriculum/institution.proto", fileDescriptor_8425bbd9ebc11bcb)
}

var fileDescriptor_8425bbd9ebc11bcb = []byte{
	// 214 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xd2, 0x4a, 0x4c, 0x4e, 0x4c,
	0x49, 0xcd, 0xcd, 0x4c, 0x2e, 0xc9, 0xcf, 0x4e, 0xcd, 0xd3, 0x4f, 0x2e, 0x2d, 0x2a, 0xca, 0x4c,
	0x2e, 0xcd, 0x29, 0xcd, 0xd5, 0xcf, 0xcc, 0x2b, 0x2e, 0xc9, 0x2c, 0x29, 0x2d, 0xc9, 0xcc, 0xcf,
	0xd3, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x92, 0x40, 0x51, 0xab, 0x87, 0x50, 0xab, 0x14, 0xcf,
	0xc5, 0xed, 0x89, 0x50, 0x2e, 0x24, 0xc1, 0xc5, 0x9e, 0x98, 0x92, 0x52, 0x94, 0x5a, 0x5c, 0x2c,
	0xc1, 0xa8, 0xc0, 0xa8, 0xc1, 0x19, 0x04, 0xe3, 0x0a, 0x09, 0x71, 0xb1, 0xe4, 0x25, 0xe6, 0xa6,
	0x4a, 0x30, 0x81, 0x85, 0xc1, 0x6c, 0x21, 0x25, 0x2e, 0x9e, 0xcc, 0x62, 0xc7, 0xd2, 0x92, 0x8c,
	0xfc, 0xa2, 0xcc, 0xaa, 0xd4, 0x14, 0x09, 0x66, 0x05, 0x46, 0x0d, 0x8e, 0x20, 0x14, 0x31, 0xa7,
	0xa0, 0x13, 0x8f, 0xe4, 0x18, 0x2f, 0x3c, 0x92, 0x63, 0x7c, 0xf0, 0x48, 0x8e, 0x71, 0xc2, 0x63,
	0x39, 0x86, 0x0b, 0x8f, 0xe5, 0x18, 0x6e, 0x3c, 0x96, 0x63, 0x88, 0xb2, 0x48, 0xcf, 0x2c, 0xc9,
	0x28, 0x4d, 0xd2, 0x4b, 0xce, 0xcf, 0xd5, 0x77, 0xca, 0x4c, 0xcc, 0x4b, 0x4e, 0xd4, 0x35, 0xb2,
	0xf4, 0x0d, 0x0e, 0xd0, 0x77, 0x84, 0x3a, 0x36, 0x04, 0xec, 0xb1, 0x0a, 0x64, 0xaf, 0x95, 0x54,
	0x16, 0xa4, 0x16, 0x27, 0xb1, 0x81, 0x7d, 0x65, 0x0c, 0x08, 0x00, 0x00, 0xff, 0xff, 0x36, 0x7d,
	0xb8, 0x86, 0x03, 0x01, 0x00, 0x00,
}

func (m *Institution) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Institution) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Institution) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.IsAuthorized {
		i--
		if m.IsAuthorized {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintInstitution(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintInstitution(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintInstitution(dAtA []byte, offset int, v uint64) int {
	offset -= sovInstitution(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Institution) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovInstitution(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovInstitution(uint64(l))
	}
	if m.IsAuthorized {
		n += 2
	}
	return n
}

func sovInstitution(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozInstitution(x uint64) (n int) {
	return sovInstitution(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Institution) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInstitution
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Institution: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Institution: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInstitution
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInstitution
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthInstitution
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInstitution
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInstitution
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthInstitution
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsAuthorized", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInstitution
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsAuthorized = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipInstitution(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthInstitution
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipInstitution(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowInstitution
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowInstitution
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowInstitution
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthInstitution
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupInstitution
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthInstitution
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthInstitution        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowInstitution          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupInstitution = fmt.Errorf("proto: unexpected end of group")
)
