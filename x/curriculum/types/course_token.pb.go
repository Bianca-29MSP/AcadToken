// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: academictoken/curriculum/course_token.proto

package types

import (
	fmt "fmt"
	io "io"
	math "math"
	math_bits "math/bits"

	proto "github.com/cosmos/gogoproto/proto"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type CourseToken struct {
	TokenId        string   `protobuf:"bytes,1,opt,name=tokenId,proto3" json:"tokenId,omitempty"`
	Name           string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Code           string   `protobuf:"bytes,3,opt,name=code,proto3" json:"code,omitempty"`
	ContentHash    string   `protobuf:"bytes,4,opt,name=contentHash,proto3" json:"contentHash,omitempty"`
	Institution    string   `protobuf:"bytes,5,opt,name=institution,proto3" json:"institution,omitempty"`
	CompletionDate string   `protobuf:"bytes,6,opt,name=completionDate,proto3" json:"completionDate,omitempty"`
	Grade          uint64   `protobuf:"varint,7,opt,name=grade,proto3" json:"grade,omitempty"`
	Prerequisites  []string `protobuf:"bytes,8,rep,name=prerequisites,proto3" json:"prerequisites,omitempty"`
	Owner          string   `protobuf:"bytes,9,opt,name=owner,proto3" json:"owner,omitempty"`
}

func (m *CourseToken) Reset()         { *m = CourseToken{} }
func (m *CourseToken) String() string { return proto.CompactTextString(m) }
func (*CourseToken) ProtoMessage()    {}
func (*CourseToken) Descriptor() ([]byte, []int) {
	return fileDescriptor_0375d7f251127e09, []int{0}
}
func (m *CourseToken) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CourseToken) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CourseToken.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CourseToken) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CourseToken.Merge(m, src)
}
func (m *CourseToken) XXX_Size() int {
	return m.Size()
}
func (m *CourseToken) XXX_DiscardUnknown() {
	xxx_messageInfo_CourseToken.DiscardUnknown(m)
}

var xxx_messageInfo_CourseToken proto.InternalMessageInfo

func (m *CourseToken) GetTokenId() string {
	if m != nil {
		return m.TokenId
	}
	return ""
}

func (m *CourseToken) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *CourseToken) GetCode() string {
	if m != nil {
		return m.Code
	}
	return ""
}

func (m *CourseToken) GetContentHash() string {
	if m != nil {
		return m.ContentHash
	}
	return ""
}

func (m *CourseToken) GetInstitution() string {
	if m != nil {
		return m.Institution
	}
	return ""
}

func (m *CourseToken) GetCompletionDate() string {
	if m != nil {
		return m.CompletionDate
	}
	return ""
}

func (m *CourseToken) GetGrade() uint64 {
	if m != nil {
		return m.Grade
	}
	return 0
}

func (m *CourseToken) GetPrerequisites() []string {
	if m != nil {
		return m.Prerequisites
	}
	return nil
}

func (m *CourseToken) GetOwner() string {
	if m != nil {
		return m.Owner
	}
	return ""
}

func init() {
	proto.RegisterType((*CourseToken)(nil), "academictoken.curriculum.CourseToken")
}

func init() {
	proto.RegisterFile("academictoken/curriculum/course_token.proto", fileDescriptor_0375d7f251127e09)
}

var fileDescriptor_0375d7f251127e09 = []byte{
	// 306 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x5c, 0x91, 0x3d, 0x4b, 0x33, 0x41,
	0x10, 0xc7, 0xb3, 0x79, 0x7d, 0xb2, 0xe1, 0xb1, 0x58, 0x2c, 0xb6, 0x5a, 0x0e, 0x11, 0x09, 0x88,
	0x39, 0xd0, 0x46, 0x4b, 0xa3, 0x85, 0x16, 0x82, 0x9c, 0x56, 0x36, 0xb2, 0xd9, 0x1b, 0x92, 0xc5,
	0xdc, 0xee, 0xb9, 0x2f, 0xa8, 0x1f, 0x42, 0xf0, 0x63, 0x59, 0xa6, 0xb4, 0x94, 0xdc, 0x17, 0x91,
	0xdd, 0x53, 0xbc, 0xd8, 0xcd, 0xff, 0x37, 0xbf, 0x99, 0x62, 0x06, 0xef, 0x73, 0xc1, 0x73, 0x28,
	0xa4, 0x70, 0xfa, 0x01, 0x54, 0x2a, 0xbc, 0x31, 0x52, 0xf8, 0xa5, 0x2f, 0x52, 0xa1, 0xbd, 0xb1,
	0x70, 0x1f, 0xf9, 0xa4, 0x34, 0xda, 0x69, 0x42, 0x37, 0xe4, 0xc9, 0xaf, 0xbc, 0xf3, 0xda, 0xc6,
	0xa3, 0xb3, 0x38, 0x70, 0x1b, 0x5a, 0x84, 0xe2, 0x41, 0x74, 0x2e, 0x73, 0x8a, 0x12, 0x34, 0x1e,
	0x66, 0x3f, 0x91, 0x10, 0xdc, 0x55, 0xbc, 0x00, 0xda, 0x8e, 0x38, 0xd6, 0x81, 0x09, 0x9d, 0x03,
	0xed, 0xd4, 0x2c, 0xd4, 0x24, 0xc1, 0x23, 0xa1, 0x95, 0x03, 0xe5, 0x2e, 0xb8, 0x5d, 0xd0, 0x6e,
	0x6c, 0x35, 0x51, 0x30, 0xa4, 0xb2, 0x4e, 0x3a, 0xef, 0xa4, 0x56, 0xb4, 0x57, 0x1b, 0x0d, 0x44,
	0xf6, 0xf0, 0x96, 0xd0, 0x45, 0xb9, 0x84, 0x90, 0xce, 0xb9, 0x03, 0xda, 0x8f, 0xd2, 0x1f, 0x4a,
	0xb6, 0x71, 0x6f, 0x6e, 0x78, 0x0e, 0x74, 0x90, 0xa0, 0x71, 0x37, 0xab, 0x03, 0xd9, 0xc5, 0xff,
	0x4b, 0x03, 0x06, 0x1e, 0xbd, 0xb4, 0xd2, 0x81, 0xa5, 0xff, 0x92, 0xce, 0x78, 0x98, 0x6d, 0xc2,
	0x30, 0xab, 0x9f, 0x14, 0x18, 0x3a, 0x8c, 0xab, 0xeb, 0x30, 0xcd, 0xde, 0xd7, 0x0c, 0xad, 0xd6,
	0x0c, 0x7d, 0xae, 0x19, 0x7a, 0xab, 0x58, 0x6b, 0x55, 0xb1, 0xd6, 0x47, 0xc5, 0x5a, 0x77, 0xc7,
	0x73, 0xe9, 0x16, 0x7e, 0x36, 0x11, 0xba, 0x48, 0xa7, 0x92, 0x2b, 0xc1, 0x0f, 0x0e, 0x4f, 0xae,
	0x6e, 0xae, 0xd3, 0xd3, 0xef, 0xdb, 0xc6, 0x03, 0xa6, 0xcf, 0xcd, 0x57, 0xb8, 0x97, 0x12, 0xec,
	0xac, 0x1f, 0x9f, 0x70, 0xf4, 0x15, 0x00, 0x00, 0xff, 0xff, 0xfb, 0x85, 0x05, 0x4f, 0xb3, 0x01,
	0x00, 0x00,
}

func (m *CourseToken) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CourseToken) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CourseToken) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Owner) > 0 {
		i -= len(m.Owner)
		copy(dAtA[i:], m.Owner)
		i = encodeVarintCourseToken(dAtA, i, uint64(len(m.Owner)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.Prerequisites) > 0 {
		for iNdEx := len(m.Prerequisites) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Prerequisites[iNdEx])
			copy(dAtA[i:], m.Prerequisites[iNdEx])
			i = encodeVarintCourseToken(dAtA, i, uint64(len(m.Prerequisites[iNdEx])))
			i--
			dAtA[i] = 0x42
		}
	}
	if m.Grade != 0 {
		i = encodeVarintCourseToken(dAtA, i, uint64(m.Grade))
		i--
		dAtA[i] = 0x38
	}
	if len(m.CompletionDate) > 0 {
		i -= len(m.CompletionDate)
		copy(dAtA[i:], m.CompletionDate)
		i = encodeVarintCourseToken(dAtA, i, uint64(len(m.CompletionDate)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Institution) > 0 {
		i -= len(m.Institution)
		copy(dAtA[i:], m.Institution)
		i = encodeVarintCourseToken(dAtA, i, uint64(len(m.Institution)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.ContentHash) > 0 {
		i -= len(m.ContentHash)
		copy(dAtA[i:], m.ContentHash)
		i = encodeVarintCourseToken(dAtA, i, uint64(len(m.ContentHash)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Code) > 0 {
		i -= len(m.Code)
		copy(dAtA[i:], m.Code)
		i = encodeVarintCourseToken(dAtA, i, uint64(len(m.Code)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintCourseToken(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.TokenId) > 0 {
		i -= len(m.TokenId)
		copy(dAtA[i:], m.TokenId)
		i = encodeVarintCourseToken(dAtA, i, uint64(len(m.TokenId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintCourseToken(dAtA []byte, offset int, v uint64) int {
	offset -= sovCourseToken(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *CourseToken) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.TokenId)
	if l > 0 {
		n += 1 + l + sovCourseToken(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovCourseToken(uint64(l))
	}
	l = len(m.Code)
	if l > 0 {
		n += 1 + l + sovCourseToken(uint64(l))
	}
	l = len(m.ContentHash)
	if l > 0 {
		n += 1 + l + sovCourseToken(uint64(l))
	}
	l = len(m.Institution)
	if l > 0 {
		n += 1 + l + sovCourseToken(uint64(l))
	}
	l = len(m.CompletionDate)
	if l > 0 {
		n += 1 + l + sovCourseToken(uint64(l))
	}
	if m.Grade != 0 {
		n += 1 + sovCourseToken(uint64(m.Grade))
	}
	if len(m.Prerequisites) > 0 {
		for _, s := range m.Prerequisites {
			l = len(s)
			n += 1 + l + sovCourseToken(uint64(l))
		}
	}
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovCourseToken(uint64(l))
	}
	return n
}

func sovCourseToken(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozCourseToken(x uint64) (n int) {
	return sovCourseToken(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *CourseToken) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCourseToken
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CourseToken: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CourseToken: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TokenId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCourseToken
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCourseToken
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCourseToken
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TokenId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCourseToken
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCourseToken
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCourseToken
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCourseToken
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCourseToken
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCourseToken
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Code = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContentHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCourseToken
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCourseToken
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCourseToken
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContentHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Institution", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCourseToken
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCourseToken
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCourseToken
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Institution = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CompletionDate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCourseToken
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCourseToken
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCourseToken
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CompletionDate = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Grade", wireType)
			}
			m.Grade = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCourseToken
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Grade |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Prerequisites", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCourseToken
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCourseToken
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCourseToken
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Prerequisites = append(m.Prerequisites, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCourseToken
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCourseToken
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCourseToken
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCourseToken(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCourseToken
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipCourseToken(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowCourseToken
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCourseToken
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCourseToken
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthCourseToken
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupCourseToken
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthCourseToken
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthCourseToken        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowCourseToken          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupCourseToken = fmt.Errorf("proto: unexpected end of group")
)
